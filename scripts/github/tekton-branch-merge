#!/usr/bin/env bash
#
# tekton-branch-merge - Merge branches across Tekton components
#
# This script performs branch merging across all Tekton components,
# with options for creating pull requests or direct merges. It provides
# detailed summaries, confirmation prompts, and comprehensive error handling.

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Determine Tekton root directory - prefer environment variable if set
if [[ -n "${TEKTON_ROOT:-}" ]]; then
  REPO_ROOT="${TEKTON_ROOT}"
else
  # Fall back to relative path detection
  REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
  echo "Warning: TEKTON_ROOT environment variable not set. Using detected path: ${REPO_ROOT}"
  echo "For reliable operation, please set TEKTON_ROOT to the root of your Tekton repository."
fi

LIB_DIR="${REPO_ROOT}/scripts/github/lib"

# shellcheck source=lib/github-utils.sh
source "${LIB_DIR}/github-utils.sh"
# shellcheck source=lib/error-utils.sh
source "${LIB_DIR}/error-utils.sh"
# shellcheck source=lib/component-utils.sh
source "${LIB_DIR}/component-utils.sh"

# Function to display usage information
usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTIONS] SOURCE_BRANCH [TARGET_BRANCH]

Merge branches across Tekton components, with options for creating
pull requests or direct merges. Provides detailed summaries and
confirmation prompts for safety.

Options:
  -h, --help           Display this help message and exit
  -v, --verbose        Enable verbose output
  -d, --dry-run        Show what would be done without making changes
  -p, --push           Push changes after merging
  -r, --pr             Create a pull request instead of direct merge
  -y, --yes            Skip all confirmation prompts (YOLO mode)
  -m, --message TEXT   Custom merge commit message
  -f, --force          Force merge even if conflicts are detected
  -c, --components     Only merge component repositories
  -M, --main-only      Only merge main repository
  
Arguments:
  SOURCE_BRANCH        Source branch containing changes to merge
  TARGET_BRANCH        Target branch to merge changes into (defaults to main)

Examples:
  $(basename "$0") sprint/feature-name-250430
    Merge sprint branch into main across all repositories

  $(basename "$0") -p -y sprint/feature-name-250430
    Merge sprint branch into main and push changes, skipping confirmations (YOLO)

  $(basename "$0") -r sprint/feature-name-250430 main
    Create pull requests from feature branch to main for all components

EOF
  exit 1
}

# Parse arguments
verbose=false
dry_run=false
push_changes=false
use_pr=false
skip_confirmation=false
force_merge=false
components_only=false
main_only=false
custom_message=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -v|--verbose)
      verbose=true
      enable_debug
      shift
      ;;
    -d|--dry-run)
      dry_run=true
      shift
      ;;
    -p|--push)
      push_changes=true
      shift
      ;;
    -r|--pr)
      use_pr=true
      shift
      ;;
    -y|--yes)
      skip_confirmation=true
      shift
      ;;
    -m|--message)
      custom_message="$2"
      shift 2
      ;;
    -f|--force)
      force_merge=true
      shift
      ;;
    -c|--components)
      components_only=true
      shift
      ;;
    -M|--main-only)
      main_only=true
      shift
      ;;
    -*)
      error_exit "Unknown option: $1"
      ;;
    *)
      break
      ;;
  esac
done

# Validate arguments
if [[ $# -lt 1 ]]; then
  error_exit "Missing required argument. Need SOURCE_BRANCH."
fi

source_branch="$1"
target_branch="${2:-$(get_main_branch)}"

# Check if both --components and --main-only are specified
if [[ "${components_only}" == "true" && "${main_only}" == "true" ]]; then
  error_exit "Cannot specify both --components and --main-only"
fi

# Get Tekton root directory
tekton_root="$(detect_tekton_root)"
if [[ -z "${tekton_root}" ]]; then
  error_exit "Not in a Tekton repository. Please run this script from within the Tekton project directory."
fi

# Prepare merge commit message
if [[ -z "${custom_message}" ]]; then
  merge_message="Merge ${source_branch} into ${target_branch}

🤖 Generated with [Claude Code](https://claude.ai/code)
Design & Engineering Guidance by Casey Koons <cskoons@gmail.com>
Co-Authored-By: Casey Koons <cskoons@gmail.com> & Claude <noreply@anthropic.com>"
else
  merge_message="${custom_message}

🤖 Generated with [Claude Code](https://claude.ai/code)
Design & Engineering Guidance by Casey Koons <cskoons@gmail.com>
Co-Authored-By: Casey Koons <cskoons@gmail.com> & Claude <noreply@anthropic.com>"
fi

# Prepare pull request template
pr_template_path="${REPO_ROOT}/scripts/github/templates/pr-templates/sprint-completion.txt"
if [[ -f "${pr_template_path}" ]]; then
  pr_template="$(cat "${pr_template_path}")"
else
  pr_template="## Summary
Merge ${source_branch} into ${target_branch}

## Details
This PR merges changes from the ${source_branch} branch into ${target_branch}.

🤖 Generated with [Claude Code](https://claude.ai/code)"
fi

# Function to generate a merge report
generate_merge_report() {
  local source_branch="$1"
  local target_branch="$2"
  local components=("$@")
  
  # Get the summary of changes for each component
  echo "# Merge Report: ${source_branch} into ${target_branch}"
  echo
  echo "## Components Affected"
  echo
  
  for component in "${components[@]:2}"; do
    echo "### ${component}"
    echo
    
    component_dir="$(get_component_directory "${component}")"
    if [[ -z "${component_dir}" ]]; then
      echo "Component directory not found, skipping"
      continue
    fi
    
    pushd "${component_dir}" > /dev/null
    
    # Check if this is a git repository
    if ! check_git_repo; then
      echo "Not a git repository, skipping"
      popd > /dev/null
      continue
    fi
    
    # Check if both branches exist
    if ! branch_exists_local "${source_branch}" && ! branch_exists_remote "${source_branch}"; then
      echo "Source branch '${source_branch}' not found"
      popd > /dev/null
      continue
    fi
    
    if ! branch_exists_local "${target_branch}" && ! branch_exists_remote "${target_branch}"; then
      echo "Target branch '${target_branch}' not found"
      popd > /dev/null
      continue
    fi
    
    # Make sure we have the latest changes
    git fetch --quiet origin "${source_branch}" "${target_branch}" &>/dev/null || true
    
    # Get stats
    local commit_count file_count insertion_count deletion_count
    
    if branch_exists_local "${source_branch}" && branch_exists_local "${target_branch}"; then
      commit_count=$(git rev-list --count "${target_branch}..${source_branch}" 2>/dev/null || echo "0")
      
      local diff_stats
      diff_stats=$(git diff --shortstat "${target_branch}..${source_branch}" 2>/dev/null || echo "")
      
      if [[ -n "${diff_stats}" ]]; then
        file_count=$(echo "${diff_stats}" | grep -oE '[0-9]+ file' | grep -oE '[0-9]+' || echo "0")
        insertion_count=$(echo "${diff_stats}" | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo "0")
        deletion_count=$(echo "${diff_stats}" | grep -oE '[0-9]+ deletion' | grep -oE '[0-9]+' || echo "0")
      else
        file_count="0"
        insertion_count="0"
        deletion_count="0"
      fi
      
      echo "- Commits: ${commit_count}"
      echo "- Files changed: ${file_count}"
      echo "- Insertions: ${insertion_count}"
      echo "- Deletions: ${deletion_count}"
      echo
      
      # List changed files
      if [[ "${file_count}" -gt 0 ]]; then
        echo "#### Changed Files"
        echo
        git diff --name-status "${target_branch}..${source_branch}" | while read -r status file; do
          local status_desc
          case "${status}" in
            A) status_desc="Added" ;;
            M) status_desc="Modified" ;;
            D) status_desc="Deleted" ;;
            R*) 
              status_desc="Renamed"
              file=$(echo "${file}" | sed -E 's/[0-9]+[[:space:]]+//')
              ;;
            *) status_desc="Changed" ;;
          esac
          echo "- ${status_desc}: ${file}"
        done
        echo
      fi
      
      # List commits
      if [[ "${commit_count}" -gt 0 ]]; then
        echo "#### Commits"
        echo
        git log --pretty=format:"- %h %s" "${target_branch}..${source_branch}"
        echo
        echo
      fi
    else
      echo "Cannot generate diff stats: branches not available locally"
    fi
    
    popd > /dev/null
  done
  
  echo "## Next Steps"
  echo
  if [[ "${use_pr}" == "true" ]]; then
    echo "1. Review and approve pull requests"
    echo "2. Merge pull requests"
    echo "3. Delete source branch with: \`tekton-branch-cleanup ${source_branch}\`"
  else
    if [[ "${push_changes}" == "true" ]]; then
      echo "1. Verify the merges were successful"
      echo "2. Delete source branch with: \`tekton-branch-cleanup ${source_branch}\`"
    else
      echo "1. Push changes with: \`tekton-branch-merge --push ${source_branch} ${target_branch}\`"
      echo "2. Delete source branch with: \`tekton-branch-cleanup ${source_branch}\`"
    fi
  fi
}

# Function to merge branches in a repository
merge_branches_in_repo() {
  local repo_dir="$1"
  local repo_name="$2"
  local result=0
  
  pushd "${repo_dir}" > /dev/null
  
  # Check if this is a git repository
  if ! check_git_repo; then
    warn "${repo_name} is not a git repository, skipping"
    popd > /dev/null
    return 1
  fi
  
  # Get current branch to restore later
  local original_branch
  original_branch="$(get_current_branch)"
  if [[ -z "${original_branch}" ]]; then
    warn "Not on a branch in ${repo_name}, skipping"
    popd > /dev/null
    return 1
  fi
  
  # Check if source branch exists
  if ! branch_exists_local "${source_branch}"; then
    if branch_exists_remote "${source_branch}"; then
      info "Source branch '${source_branch}' exists only on remote in ${repo_name}, fetching"
      if [[ "${dry_run}" != "true" ]]; then
        git fetch origin "${source_branch}" || {
          warn "Failed to fetch source branch '${source_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
        git checkout -b "${source_branch}" "origin/${source_branch}" || {
          warn "Failed to checkout source branch '${source_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
      else
        info "[DRY RUN] Would fetch and checkout source branch '${source_branch}'"
      fi
    else
      warn "Source branch '${source_branch}' does not exist locally or remotely in ${repo_name}, skipping"
      popd > /dev/null
      return 1
    fi
  fi
  
  # Check if target branch exists
  if ! branch_exists_local "${target_branch}"; then
    if branch_exists_remote "${target_branch}"; then
      info "Target branch '${target_branch}' exists only on remote in ${repo_name}, fetching"
      if [[ "${dry_run}" != "true" ]]; then
        git fetch origin "${target_branch}" || {
          warn "Failed to fetch target branch '${target_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
        git checkout -b "${target_branch}" "origin/${target_branch}" || {
          warn "Failed to checkout target branch '${target_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
      else
        info "[DRY RUN] Would fetch and checkout target branch '${target_branch}'"
      fi
    else
      warn "Target branch '${target_branch}' does not exist locally or remotely in ${repo_name}, skipping"
      popd > /dev/null
      return 1
    fi
  fi
  
  # Check for uncommitted changes
  if ! is_working_directory_clean; then
    warn "Working directory is not clean in ${repo_name}, stashing changes"
    if [[ "${dry_run}" != "true" ]]; then
      git stash save "Stashed by tekton-branch-merge before merge" || {
        error_exit "Failed to stash changes in ${repo_name}"
      }
    else
      info "[DRY RUN] Would stash uncommitted changes"
    fi
  fi
  
  # Perform the merge or create a PR
  if [[ "${use_pr}" == "true" ]]; then
    # Create a pull request
    info "Creating pull request from '${source_branch}' to '${target_branch}' in ${repo_name}"
    
    if [[ "${dry_run}" != "true" ]]; then
      # Make sure branches are up to date with remote
      git fetch origin "${source_branch}" "${target_branch}" || warn "Failed to fetch latest branch updates"
      
      # Check if GitHub CLI is available
      if check_github_cli; then
        # Get PR title
        pr_title="Merge ${source_branch} into ${target_branch} for ${repo_name}"
        
        # Create the PR
        local pr_url
        pr_url=$(create_pull_request "${pr_title}" "${pr_template}" "${target_branch}" "${source_branch}")
        
        if [[ -n "${pr_url}" ]]; then
          success "Created pull request: ${pr_url}"
        else
          warn "Failed to create pull request in ${repo_name}"
          result=1
        fi
      else
        warn "GitHub CLI (gh) not available, skipping PR creation for ${repo_name}"
        info "To create a PR manually, visit: https://github.com/your-org/${repo_name}/compare/${target_branch}...${source_branch}"
        result=1
      fi
    else
      info "[DRY RUN] Would create PR from '${source_branch}' to '${target_branch}' in ${repo_name}"
    fi
  else
    # Perform direct merge
    info "Merging '${source_branch}' into '${target_branch}' in ${repo_name}"
    
    if [[ "${dry_run}" != "true" ]]; then
      # Make sure branches are up to date with remote
      git fetch origin "${source_branch}" "${target_branch}" || warn "Failed to fetch latest branch updates"
      
      # Checkout target branch
      git checkout "${target_branch}" || {
        error_exit "Failed to checkout target branch '${target_branch}' in ${repo_name}"
      }
      
      # Create a temporary file for the merge commit message
      local message_file
      message_file="$(mktemp)"
      echo "${merge_message}" > "${message_file}"
      
      # Perform the merge
      if git merge --no-ff "${source_branch}" -F "${message_file}"; then
        success "Successfully merged '${source_branch}' into '${target_branch}' in ${repo_name}"
        
        # Push changes if requested
        if [[ "${push_changes}" == "true" ]]; then
          info "Pushing changes to remote in ${repo_name}"
          if git push origin "${target_branch}"; then
            success "Successfully pushed changes to remote in ${repo_name}"
          else
            warn "Failed to push changes to remote in ${repo_name}"
            result=1
          fi
        fi
      else
        warn "Merge conflicts detected in ${repo_name}"
        if [[ "${force_merge}" == "true" ]]; then
          warn "Force flag set, aborting merge and continuing"
          git merge --abort
          result=1
        else
          error_exit "Merge conflicts detected in ${repo_name}. Resolve conflicts and commit, or use --force to skip conflicted repositories."
        fi
      fi
      
      # Clean up the temporary file
      rm -f "${message_file}"
    else
      info "[DRY RUN] Would merge '${source_branch}' into '${target_branch}' in ${repo_name}"
      if [[ "${push_changes}" == "true" ]]; then
        info "[DRY RUN] Would push changes to remote"
      fi
    fi
  fi
  
  # Restore original branch and stashed changes
  if [[ "${dry_run}" != "true" ]]; then
    # Restore original branch
    git checkout "${original_branch}" || warn "Failed to restore original branch '${original_branch}' in ${repo_name}"
    
    # Restore stashed changes if any
    if [[ "$(git stash list | grep -c "Stashed by tekton-branch-merge before merge")" -gt 0 ]]; then
      info "Restoring stashed changes in ${repo_name}"
      git stash pop || warn "Failed to restore stashed changes in ${repo_name}"
    fi
  else
    info "[DRY RUN] Would restore original branch and stashed changes"
  fi
  
  popd > /dev/null
  return ${result}
}

# Collect information about components to merge
declare -a components_to_merge
declare -a component_stats

# Check main repository if requested
if [[ "${components_only}" != "true" ]]; then
  components_to_merge+=("Tekton")
fi

# Check component repositories if requested
if [[ "${main_only}" != "true" ]]; then
  # Get list of all components with repositories
  for component in $(list_component_repos); do
    components_to_merge+=("${component}")
  done
fi

# If no components to merge, exit
if [[ ${#components_to_merge[@]} -eq 0 ]]; then
  error_exit "No components to merge. Check if --components or --main-only flags conflict with repository structure."
fi

# Phase 1: Preparation - Check branch status across components
echo -e "\n${BLUE}Phase 1: Preparation - Checking branch status across components${RESET}"

for component in "${components_to_merge[@]}"; do
  echo -e "\n${BLUE}Checking ${component}...${RESET}"
  
  component_dir="$(get_component_directory "${component}")"
  if [[ -z "${component_dir}" ]]; then
    warn "Component directory not found for ${component}, skipping"
    continue
  fi
  
  pushd "${component_dir}" > /dev/null
  
  # Check if this is a git repository
  if ! check_git_repo; then
    warn "${component} is not a git repository, skipping"
    popd > /dev/null
    continue
  fi
  
  # Make sure we have the latest information
  git fetch --quiet origin "${source_branch}" "${target_branch}" &>/dev/null || true
  
  # Check if branches exist
  local source_exists="No"
  local target_exists="No"
  local status="Unknown"
  local commits="Unknown"
  local files="Unknown"
  
  if branch_exists_local "${source_branch}" || branch_exists_remote "${source_branch}"; then
    source_exists="Yes"
  fi
  
  if branch_exists_local "${target_branch}" || branch_exists_remote "${target_branch}"; then
    target_exists="Yes"
  fi
  
  if [[ "${source_exists}" == "Yes" && "${target_exists}" == "Yes" ]]; then
    # Get ahead/behind status
    if branch_exists_local "${source_branch}" && branch_exists_local "${target_branch}"; then
      local commit_count file_count
      
      # Count commits
      commit_count=$(git rev-list --count "${target_branch}..${source_branch}" 2>/dev/null || echo "0")
      
      # Get changed files
      local diff_stats
      diff_stats=$(git diff --shortstat "${target_branch}..${source_branch}" 2>/dev/null || echo "")
      
      if [[ -n "${diff_stats}" ]]; then
        file_count=$(echo "${diff_stats}" | grep -oE '[0-9]+ file' | grep -oE '[0-9]+' || echo "0")
      else
        file_count="0"
      fi
      
      # Check for potential conflicts
      local conflict_check
      conflict_check=$(git checkout -q "${target_branch}" &>/dev/null && \
                       git merge --no-commit --no-ff "${source_branch}" &>/dev/null && \
                       git merge --abort &>/dev/null && echo "Clean" || echo "Conflicts")
      
      # Store status
      if [[ "${commit_count}" -eq 0 ]]; then
        status="No changes"
      elif [[ "${conflict_check}" == "Clean" ]]; then
        status="Ready to merge"
      else
        status="Potential conflicts"
      fi
      
      commits="${commit_count}"
      files="${file_count}"
      
      # Restore previous branch
      git checkout -q "$(get_current_branch)" &>/dev/null || true
    else
      status="Branches need fetching"
    fi
  else
    if [[ "${source_exists}" == "No" ]]; then
      status="Source branch missing"
    elif [[ "${target_exists}" == "No" ]]; then
      status="Target branch missing"
    fi
  fi
  
  # Store component stats
  component_stats+=("${component}|${source_exists}|${target_exists}|${status}|${commits}|${files}")
  
  popd > /dev/null
done

# Phase 2: Review - Display component status and confirm merge
echo -e "\n${BLUE}Phase 2: Review - Component Status Summary${RESET}"
echo -e "\n┌────────────────────────┬────────────┬────────────┬───────────────────┬─────────┬────────────┐"
echo -e "│ Component              │ Source     │ Target     │ Status            │ Commits │ Files      │"
echo -e "├────────────────────────┼────────────┼────────────┼───────────────────┼─────────┼────────────┤"

declare -a mergeable_components
declare -a warning_components
declare -a skipped_components

for stat in "${component_stats[@]}"; do
  IFS='|' read -r component source_exists target_exists status commits files <<< "${stat}"
  
  # Format display
  printf "│ %-22s │ %-10s │ %-10s │ %-17s │ %-7s │ %-10s │\n" \
    "${component}" "${source_exists}" "${target_exists}" "${status}" "${commits}" "${files}"
  
  # Categorize components
  if [[ "${status}" == "Ready to merge" ]]; then
    mergeable_components+=("${component}")
  elif [[ "${status}" == "Potential conflicts" ]]; then
    warning_components+=("${component}")
  else
    skipped_components+=("${component}")
  fi
done

echo -e "└────────────────────────┴────────────┴────────────┴───────────────────┴─────────┴────────────┘"

# Summary counts
echo -e "\n${BLUE}Summary:${RESET}"
echo -e "- Components ready to merge: ${#mergeable_components[@]}"
echo -e "- Components with potential conflicts: ${#warning_components[@]}"
echo -e "- Components to be skipped: ${#skipped_components[@]}"

# Generate a detailed merge report
echo -e "\n${BLUE}Generating detailed merge report...${RESET}"
report=$(generate_merge_report "${source_branch}" "${target_branch}" "${components_to_merge[@]}")

# Save the report to a file
report_file="${REPO_ROOT}/MetaData/DevelopmentSprints/MergeReports/merge-${source_branch//\//-}-to-${target_branch//\//-}-$(date +%Y%m%d-%H%M%S).md"
mkdir -p "$(dirname "${report_file}")"
echo "${report}" > "${report_file}"
echo -e "Detailed merge report saved to: ${report_file}"

# Confirmation
if [[ "${skip_confirmation}" != "true" && "${dry_run}" != "true" ]]; then
  echo -e "\n${YELLOW}WARNING: This operation will merge '${source_branch}' into '${target_branch}' across multiple repositories."
  echo -e "This action is potentially destructive and cannot be easily undone.${RESET}"
  
  read -rp "Are you sure you want to proceed? (y/N) " confirm
  if [[ "${confirm}" != "y" && "${confirm}" != "Y" ]]; then
    info "Operation cancelled by user"
    exit 0
  fi
  
  if [[ "${push_changes}" == "true" ]]; then
    echo -e "\n${YELLOW}WARNING: Changes will be pushed to remote repositories.${RESET}"
    read -rp "Confirm push to remote? (y/N) " confirm_push
    if [[ "${confirm_push}" != "y" && "${confirm_push}" != "Y" ]]; then
      push_changes=false
      info "Push cancelled by user, will perform merge without pushing"
    fi
  fi
fi

# Phase 3: Execution - Perform the merge
echo -e "\n${BLUE}Phase 3: Execution - Performing merge operations${RESET}"

# Initialize results tracking
declare -a successful_repos
declare -a failed_repos
declare -a skipped_repos

# Process main repository if requested
if [[ "${components_only}" != "true" ]]; then
  echo -e "\n${BLUE}Processing main Tekton repository...${RESET}"
  
  if merge_branches_in_repo "${tekton_root}" "Tekton"; then
    successful_repos+=("Tekton")
  else
    if [[ "${dry_run}" == "true" ]]; then
      skipped_repos+=("Tekton")
    else
      failed_repos+=("Tekton")
    fi
  fi
fi

# Process component repositories if requested
if [[ "${main_only}" != "true" ]]; then
  echo -e "\n${BLUE}Processing component repositories...${RESET}"
  
  for component in $(list_component_repos); do
    component_dir="$(get_component_directory "${component}")"
    if [[ -z "${component_dir}" ]]; then
      warn "Component directory not found for ${component}, skipping"
      skipped_repos+=("${component}")
      continue
    fi
    
    echo -e "\n${BLUE}Processing component: ${component}${RESET}"
    if merge_branches_in_repo "${component_dir}" "${component}"; then
      successful_repos+=("${component}")
    else
      if [[ "${dry_run}" == "true" ]]; then
        skipped_repos+=("${component}")
      else
        failed_repos+=("${component}")
      fi
    fi
  done
fi

# Phase 4: Summary - Display results
if [[ "${dry_run}" == "true" ]]; then
  echo -e "\n${BLUE}Dry Run Summary:${RESET}"
  echo -e "----------------"
  echo -e "Would merge branches in ${#successful_repos[@]} repositories"
  echo -e "Would skip ${#skipped_repos[@]} repositories"
else
  echo -e "\n${BLUE}Merge Summary:${RESET}"
  echo -e "-------------"
  echo -e "Successfully merged: ${#successful_repos[@]}"
  echo -e "Failed to merge: ${#failed_repos[@]}"
  echo -e "Skipped: ${#skipped_repos[@]}"
  
  if [[ ${#successful_repos[@]} -gt 0 ]]; then
    echo -e "\n${GREEN}Successful repositories:${RESET}"
    for repo in "${successful_repos[@]}"; do
      echo -e "  - ${repo}"
    done
  fi
  
  if [[ ${#failed_repos[@]} -gt 0 ]]; then
    echo -e "\n${RED}Failed repositories:${RESET}"
    for repo in "${failed_repos[@]}"; do
      echo -e "  - ${repo}"
    done
  fi
  
  if [[ ${#skipped_repos[@]} -gt 0 ]]; then
    echo -e "\n${YELLOW}Skipped repositories:${RESET}"
    for repo in "${skipped_repos[@]}"; do
      echo -e "  - ${repo}"
    done
  fi
fi

# Provide next steps
echo -e "\n${BLUE}Next Steps:${RESET}"
if [[ ${#failed_repos[@]} -gt 0 && "${force_merge}" != "true" ]]; then
  echo -e "- Resolve conflicts in failed repositories and commit changes"
  echo -e "- Re-run merge with the --force flag to skip repositories with conflicts"
elif [[ "${push_changes}" != "true" && "${dry_run}" != "true" && "${use_pr}" != "true" ]]; then
  echo -e "- Review merged branches and push changes with:"
  echo -e "  $(basename "$0") --push ${source_branch} ${target_branch}"
elif [[ "${use_pr}" == "true" ]]; then
  echo -e "- Review and approve pull requests"
  echo -e "- Merge pull requests"
fi

if [[ "${dry_run}" != "true" ]]; then
  echo -e "- Check branch status with:"
  echo -e "  ${SCRIPT_DIR}/tekton-branch-status ${target_branch}"
  
  if [[ ${#successful_repos[@]} -gt 0 ]]; then
    echo -e "- Clean up source branches with:"
    echo -e "  ${SCRIPT_DIR}/tekton-branch-cleanup ${source_branch}"
  fi
fi

# Open merge report if available
if [[ "${dry_run}" != "true" && -f "${report_file}" ]]; then
  echo -e "- Detailed merge report available at: ${report_file}"
fi

if [[ ${#failed_repos[@]} -gt 0 ]]; then
  exit 1
else
  exit 0
fi