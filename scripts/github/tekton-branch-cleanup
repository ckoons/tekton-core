#!/usr/bin/env bash
#
# tekton-branch-cleanup - Clean up unused branches across Tekton components
#
# This script safely cleans up unused branches across the main Tekton repository
# and all component repositories, with protection for important branches.

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/lib"

# shellcheck source=lib/github-utils.sh
source "${LIB_DIR}/github-utils.sh"
# shellcheck source=lib/error-utils.sh
source "${LIB_DIR}/error-utils.sh"
# shellcheck source=lib/component-utils.sh
source "${LIB_DIR}/component-utils.sh"

# Function to display usage information
usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTIONS] [PATTERN]

Clean up unused branches across Tekton components, with protection
for important branches.

Options:
  -h, --help           Display this help message and exit
  -v, --verbose        Enable verbose output
  -d, --dry-run        Show what would be done without making changes
  -l, --local          Delete only local branches
  -r, --remote         Delete only remote branches
  -f, --force          Force branch deletion (including unmerged branches)
  -c, --components     Only clean up component repositories
  -m, --main-only      Only clean up main repository
  -a, --all            Include all branches (override protection)
  -o, --older-than N   Only delete branches older than N days
  
Arguments:
  PATTERN              Optional pattern to match branch names (e.g., "sprint/*")

Protected branches (not deleted unless --all is specified):
  - main, master, develop, staging
  - sprint branches less than 30 days old
  - branches with "protected" in their name

Examples:
  $(basename "$0") --dry-run "sprint/*"
    Show which sprint branches would be deleted

  $(basename "$0") --local --older-than 90 "feature/*"
    Delete local feature branches older than 90 days

  $(basename "$0") --remote --force "bugfix/*"
    Force delete remote bugfix branches

EOF
  exit 1
}

# Parse arguments
verbose=false
dry_run=false
delete_local=true
delete_remote=true
force_delete=false
components_only=false
main_only=false
include_all=false
days_threshold=0  # 0 means no age filtering
branch_pattern=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -v|--verbose)
      verbose=true
      enable_debug
      shift
      ;;
    -d|--dry-run)
      dry_run=true
      shift
      ;;
    -l|--local)
      delete_local=true
      delete_remote=false
      shift
      ;;
    -r|--remote)
      delete_local=false
      delete_remote=true
      shift
      ;;
    -f|--force)
      force_delete=true
      shift
      ;;
    -c|--components)
      components_only=true
      shift
      ;;
    -m|--main-only)
      main_only=true
      shift
      ;;
    -a|--all)
      include_all=true
      shift
      ;;
    -o|--older-than)
      days_threshold="$2"
      shift 2
      ;;
    -*)
      error_exit "Unknown option: $1"
      ;;
    *)
      branch_pattern="$1"
      shift
      break
      ;;
  esac
done

# Validate arguments
if [[ "${components_only}" == "true" && "${main_only}" == "true" ]]; then
  error_exit "Cannot specify both --components and --main-only"
fi

# Get Tekton root directory
tekton_root="$(detect_tekton_root)"
if [[ -z "${tekton_root}" ]]; then
  error_exit "Not in a Tekton repository. Please run this script from within the Tekton project directory."
fi

# Function to check if a branch is protected
is_protected_branch() {
  local branch="$1"
  
  # Always protect main branches unless --all is specified
  if [[ "${include_all}" != "true" ]]; then
    # Check for main branch names
    if [[ "${branch}" =~ ^(main|master|develop|staging)$ ]]; then
      return 0
    fi
    
    # Check for branches with "protected" in the name
    if [[ "${branch}" =~ protected ]]; then
      return 0
    fi
    
    # Check for sprint branches less than 30 days old
    if [[ "${branch}" =~ ^sprint/ ]]; then
      # Extract date from branch name if possible (looking for YYMMDD pattern)
      if [[ "${branch}" =~ -([0-9]{6})$ ]]; then
        branch_date="${BASH_REMATCH[1]}"
        year="20${branch_date:0:2}"
        month="${branch_date:2:2}"
        day="${branch_date:4:2}"
        
        # Convert to seconds since epoch
        branch_epoch=$(date -j -f "%Y%m%d" "${year}${month}${day}" "+%s" 2>/dev/null || echo "0")
        if [[ "${branch_epoch}" != "0" ]]; then
          today_epoch=$(date "+%s")
          age_days=$(( (today_epoch - branch_epoch) / 86400 ))
          
          # Protect sprint branches less than 30 days old
          if [[ "${age_days}" -lt 30 ]]; then
            return 0
          fi
        fi
      fi
    fi
  fi
  
  return 1
}

# Function to check if a branch meets age requirements
meets_age_requirement() {
  local branch="$1"
  local repo_dir="$2"
  
  # If no age threshold specified, all branches meet the requirement
  if [[ "${days_threshold}" -eq 0 ]]; then
    return 0
  fi
  
  # Get the last commit date for the branch
  pushd "${repo_dir}" > /dev/null
  local commit_date
  commit_date=$(git log -1 --format="%at" "${branch}" 2>/dev/null)
  popd > /dev/null
  
  # If date retrieval failed, assume it doesn't meet the requirement
  if [[ -z "${commit_date}" ]]; then
    return 1
  fi
  
  # Calculate age in days
  local today_epoch
  today_epoch=$(date "+%s")
  local age_days
  age_days=$(( (today_epoch - commit_date) / 86400 ))
  
  # Check if age meets threshold
  if [[ "${age_days}" -ge "${days_threshold}" ]]; then
    return 0
  else
    return 1
  fi
}

# Function to clean up branches in a repository
cleanup_branches_in_repo() {
  local repo_dir="$1"
  local repo_name="$2"
  local deleted_count=0
  local skipped_count=0
  
  pushd "${repo_dir}" > /dev/null
  
  # Check if this is a git repository
  if ! check_git_repo; then
    warn "${repo_name} is not a git repository, skipping"
    popd > /dev/null
    return
  fi
  
  # Update remote information
  if [[ "${delete_remote}" == "true" || "${dry_run}" == "true" ]]; then
    debug "Fetching remote information for ${repo_name}"
    git fetch --prune &>/dev/null || warn "Failed to fetch remote information for ${repo_name}"
  fi
  
  # Get current branch
  local current_branch
  current_branch="$(get_current_branch)"
  
  # Process local branches
  if [[ "${delete_local}" == "true" ]]; then
    local local_branches
    if [[ -n "${branch_pattern}" ]]; then
      mapfile -t local_branches < <(git branch --list "${branch_pattern}" | sed 's/^[ *]*//')
    else
      mapfile -t local_branches < <(git branch | sed 's/^[ *]*//')
    fi
    
    for branch in "${local_branches[@]}"; do
      # Skip empty branch names
      if [[ -z "${branch}" ]]; then
        continue
      fi
      
      # Skip current branch
      if [[ "${branch}" == "${current_branch}" ]]; then
        debug "Skipping current branch ${branch} in ${repo_name}"
        ((skipped_count++))
        continue
      fi
      
      # Check if branch is protected
      if is_protected_branch "${branch}"; then
        debug "Skipping protected branch ${branch} in ${repo_name}"
        ((skipped_count++))
        continue
      fi
      
      # Check if branch meets age requirement
      if ! meets_age_requirement "${branch}" "${repo_dir}"; then
        debug "Skipping branch ${branch} in ${repo_name}, doesn't meet age requirement"
        ((skipped_count++))
        continue
      fi
      
      # Delete branch
      if [[ "${dry_run}" == "true" ]]; then
        info "[DRY RUN] Would delete local branch '${branch}' in ${repo_name}"
        ((deleted_count++))
      else
        info "Deleting local branch '${branch}' in ${repo_name}"
        if [[ "${force_delete}" == "true" ]]; then
          if git branch -D "${branch}" &>/dev/null; then
            success "Deleted local branch '${branch}' in ${repo_name}"
            ((deleted_count++))
          else
            warn "Failed to delete local branch '${branch}' in ${repo_name}"
            ((skipped_count++))
          fi
        else
          if git branch -d "${branch}" &>/dev/null; then
            success "Deleted local branch '${branch}' in ${repo_name}"
            ((deleted_count++))
          else
            warn "Failed to delete local branch '${branch}' in ${repo_name} (not fully merged). Use --force to delete anyway."
            ((skipped_count++))
          fi
        fi
      fi
    done
  fi
  
  # Process remote branches
  if [[ "${delete_remote}" == "true" ]]; then
    local remote_branches
    if [[ -n "${branch_pattern}" ]]; then
      mapfile -t remote_branches < <(git branch -r --list "origin/${branch_pattern}" | sed 's/^[ *]*origin\///')
    else
      mapfile -t remote_branches < <(git branch -r | grep '^  origin/' | sed 's/^  origin\///')
    fi
    
    # Filter out HEAD
    remote_branches=("${remote_branches[@]/HEAD/}")
    
    for branch in "${remote_branches[@]}"; do
      # Skip empty branch names
      if [[ -z "${branch}" ]]; then
        continue
      fi
      
      # Check if branch is protected
      if is_protected_branch "${branch}"; then
        debug "Skipping protected remote branch ${branch} in ${repo_name}"
        ((skipped_count++))
        continue
      fi
      
      # Check if branch meets age requirement
      if ! meets_age_requirement "origin/${branch}" "${repo_dir}"; then
        debug "Skipping remote branch ${branch} in ${repo_name}, doesn't meet age requirement"
        ((skipped_count++))
        continue
      fi
      
      # Delete branch
      if [[ "${dry_run}" == "true" ]]; then
        info "[DRY RUN] Would delete remote branch '${branch}' in ${repo_name}"
        ((deleted_count++))
      else
        info "Deleting remote branch '${branch}' in ${repo_name}"
        if git push origin --delete "${branch}" &>/dev/null; then
          success "Deleted remote branch '${branch}' in ${repo_name}"
          ((deleted_count++))
        else
          warn "Failed to delete remote branch '${branch}' in ${repo_name}"
          ((skipped_count++))
        fi
      fi
    done
  fi
  
  popd > /dev/null
  
  # Return counts
  echo "${deleted_count}:${skipped_count}"
}

# Initialize results tracking
declare -a repo_names
declare -a deleted_counts
declare -a skipped_counts

# Clean up main repository if requested
if [[ "${components_only}" != "true" ]]; then
  info "Cleaning up branches in main Tekton repository"
  result=$(cleanup_branches_in_repo "${tekton_root}" "Tekton")
  repo_names+=("Tekton")
  deleted_counts+=($(echo "${result}" | cut -d':' -f1))
  skipped_counts+=($(echo "${result}" | cut -d':' -f2))
fi

# Clean up component repositories if requested
if [[ "${main_only}" != "true" ]]; then
  info "Cleaning up branches in component repositories"
  
  # Get list of all components with repositories
  component_repos=($(list_component_repos))
  
  if [[ ${#component_repos[@]} -eq 0 ]]; then
    warn "No component repositories found"
  else
    for component in "${component_repos[@]}"; do
      component_dir="$(get_component_directory "${component}")"
      if [[ -z "${component_dir}" ]]; then
        warn "Component directory not found for ${component}, skipping"
        continue
      fi
      
      info "Processing component: ${component}"
      result=$(cleanup_branches_in_repo "${component_dir}" "${component}")
      repo_names+=("${component}")
      deleted_counts+=($(echo "${result}" | cut -d':' -f1))
      skipped_counts+=($(echo "${result}" | cut -d':' -f2))
    done
  fi
fi

# Print summary
echo -e "\nBranch Cleanup Summary:"
echo -e "----------------------"

total_deleted=0
total_skipped=0

# Print table header
printf "%-20s %-15s %-15s\n" "REPOSITORY" "DELETED" "SKIPPED"
printf "%-20s %-15s %-15s\n" "--------------------" "---------------" "---------------"

# Print results for each repository
for i in "${!repo_names[@]}"; do
  printf "%-20s %-15s %-15s\n" "${repo_names[$i]}" "${deleted_counts[$i]}" "${skipped_counts[$i]}"
  total_deleted=$((total_deleted + deleted_counts[$i]))
  total_skipped=$((total_skipped + skipped_counts[$i]))
done

# Print totals
printf "%-20s %-15s %-15s\n" "TOTAL" "${total_deleted}" "${total_skipped}"

# Print additional information based on dry run mode
if [[ "${dry_run}" == "true" ]]; then
  echo -e "\nThis was a dry run. No branches were actually deleted."
  echo -e "To perform the actual cleanup, re-run without the --dry-run option."
else
  echo -e "\nBranch cleanup completed."
  
  if [[ "${total_deleted}" -eq 0 && "${total_skipped}" -gt 0 ]]; then
    echo -e "\nNote: No branches were deleted. This could be due to:"
    echo -e "- Protected branches (main, develop, etc.)"
    echo -e "- Unmerged branches (use --force to delete anyway)"
    echo -e "- Age threshold not met (${days_threshold} days)"
    echo -e "- Branch pattern not matching any branches"
  fi
fi

# Provide recommendations
echo -e "\nRecommendations:"
if [[ "${total_skipped}" -gt 0 ]]; then
  echo -e "- Use --force to delete unmerged branches"
  echo -e "- Use --all to include protected branches (use with caution!)"
  if [[ "${days_threshold}" -eq 0 ]]; then
    echo -e "- Use --older-than to only delete older branches"
  fi
fi

echo -e "- Use --dry-run to preview changes without making them"

exit 0