#!/usr/bin/env bash
#
# tekton-branch-verify - Verify branch correctness for Claude sessions
#
# This script verifies that the current branch matches the expected branch
# for a development sprint or feature branch, providing clear feedback for
# Claude Code sessions to interpret.

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/lib"

# shellcheck source=lib/github-utils.sh
source "${LIB_DIR}/github-utils.sh"
# shellcheck source=lib/error-utils.sh
source "${LIB_DIR}/error-utils.sh"
# shellcheck source=lib/component-utils.sh
source "${LIB_DIR}/component-utils.sh"

# Function to display usage information
usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTIONS] [EXPECTED_BRANCH]

Verify that the current branch matches the expected branch for a
development sprint or feature branch, providing clear feedback for
Claude Code sessions to interpret.

Options:
  -h, --help           Display this help message and exit
  -v, --verbose        Enable verbose output
  -j, --json           Output in JSON format
  -c, --claude         Format output specifically for Claude sessions
  -s, --strict         Fail if branch doesn't exactly match expected
  
Arguments:
  EXPECTED_BRANCH      Expected branch name to verify against

Examples:
  $(basename "$0") sprint/github-support-250430
    Verify current branch against 'sprint/github-support-250430'

  $(basename "$0") -c sprint/feature-name-250430
    Verify and format output for Claude sessions

EOF
  exit 1
}

# Parse arguments
verbose=false
json_output=false
claude_format=false
strict_matching=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -v|--verbose)
      verbose=true
      enable_debug
      shift
      ;;
    -j|--json)
      json_output=true
      shift
      ;;
    -c|--claude)
      claude_format=true
      shift
      ;;
    -s|--strict)
      strict_matching=true
      shift
      ;;
    -*)
      error_exit "Unknown option: $1"
      ;;
    *)
      break
      ;;
  esac
done

# Get expected branch name
expected_branch=""
if [[ $# -ge 1 ]]; then
  expected_branch="$1"
else
  error_exit "Expected branch name must be provided"
fi

# Get Tekton root directory
tekton_root="$(detect_tekton_root)"
if [[ -z "${tekton_root}" ]]; then
  error_exit "Not in a Tekton repository. Please run this script from within the Tekton project directory."
fi

# Get current branch
current_branch="$(get_current_branch)"
if [[ -z "${current_branch}" ]]; then
  error_exit "Not currently on a branch. Please switch to a branch first."
fi

# Verify branch name format
validate_expected=true
if ! validate_branch_name "${expected_branch}"; then
  validate_expected=false
  warn "Expected branch name '${expected_branch}' does not follow Tekton naming conventions"
fi

validate_current=true
if ! validate_branch_name "${current_branch}"; then
  validate_current=false
  warn "Current branch name '${current_branch}' does not follow Tekton naming conventions"
fi

# Check branch match
exact_match=false
pattern_match=false
normalized_expected=""
normalized_current=""

if [[ "${current_branch}" == "${expected_branch}" ]]; then
  exact_match=true
else
  # Try pattern-based matching (more lenient)
  # Strip any date suffix and normalize to lowercase for comparison
  normalized_expected=$(echo "${expected_branch}" | sed -E 's/-[0-9]{6}$//' | tr '[:upper:]' '[:lower:]')
  normalized_current=$(echo "${current_branch}" | sed -E 's/-[0-9]{6}$//' | tr '[:upper:]' '[:lower:]')
  
  # If the normalized names match, consider it a pattern match
  if [[ "${normalized_current}" == "${normalized_expected}" ]]; then
    pattern_match=true
  fi
fi

# Determine overall match result
match_result=""
if [[ "${exact_match}" == "true" ]]; then
  match_result="exact"
elif [[ "${pattern_match}" == "true" ]]; then
  match_result="similar"
else
  match_result="different"
fi

# Determine verification result
verification_result=""
if [[ "${exact_match}" == "true" ]]; then
  verification_result="success"
elif [[ "${pattern_match}" == "true" && "${strict_matching}" != "true" ]]; then
  verification_result="warning"
else
  verification_result="failure"
fi

# Get the main branch for reference
main_branch=""
pushd "${tekton_root}" > /dev/null
if check_git_repo; then
  main_branch="$(get_main_branch)"
fi
popd > /dev/null
if [[ -z "${main_branch}" ]]; then
  main_branch="main"  # Default if can't determine
fi

# Output results
if [[ "${json_output}" == "true" ]]; then
  # Output in JSON format
  cat <<EOF
{
  "expected_branch": "${expected_branch}",
  "current_branch": "${current_branch}",
  "main_branch": "${main_branch}",
  "exact_match": ${exact_match},
  "pattern_match": ${pattern_match},
  "match_result": "${match_result}",
  "verification_result": "${verification_result}",
  "valid_expected_format": ${validate_expected},
  "valid_current_format": ${validate_current}
}
EOF
elif [[ "${claude_format}" == "true" ]]; then
  # Output in Claude-friendly format
  echo "<branch_verification>"
  echo "expected_branch: ${expected_branch}"
  echo "current_branch: ${current_branch}"
  echo "main_branch: ${main_branch}"
  echo "match_result: ${match_result}"
  echo "verification_result: ${verification_result}"
  echo "valid_format: ${validate_current}"
  echo "</branch_verification>"
  
  # Include human-readable message for Claude
  if [[ "${verification_result}" == "success" ]]; then
    echo -e "\n${GREEN}VERIFICATION SUCCESS:${RESET} You are on the correct branch '${current_branch}'"
  elif [[ "${verification_result}" == "warning" ]]; then
    echo -e "\n${YELLOW}VERIFICATION WARNING:${RESET} Branch '${current_branch}' is similar to expected '${expected_branch}' but not an exact match"
    echo "This is acceptable if working with a date variation of the same feature branch."
  else
    echo -e "\n${RED}VERIFICATION FAILURE:${RESET} Expected branch '${expected_branch}' but currently on '${current_branch}'"
    echo "Please switch to the correct branch before proceeding:"
    echo "git checkout ${expected_branch}"
    
    # Check if the expected branch exists
    pushd "${tekton_root}" > /dev/null
    if branch_exists_local "${expected_branch}"; then
      echo "The expected branch exists locally and can be checked out directly."
    elif branch_exists_remote "${expected_branch}"; then
      echo "The expected branch exists on the remote and can be checked out with:"
      echo "git fetch origin && git checkout ${expected_branch}"
    else
      echo "The expected branch does not exist locally or remotely. It needs to be created with:"
      echo "${SCRIPT_DIR}/tekton-branch-create ${expected_branch}"
    fi
    popd > /dev/null
  fi
else
  # Output in standard human-readable format
  echo "Branch Verification:"
  echo "-------------------"
  echo "Expected branch: ${expected_branch}"
  echo "Current branch:  ${current_branch}"
  echo "Main branch:     ${main_branch}"
  echo ""
  
  if [[ "${verification_result}" == "success" ]]; then
    echo -e "${GREEN}VERIFICATION SUCCESS:${RESET} You are on the correct branch"
  elif [[ "${verification_result}" == "warning" ]]; then
    echo -e "${YELLOW}VERIFICATION WARNING:${RESET} Branch is similar but not an exact match"
  else
    echo -e "${RED}VERIFICATION FAILURE:${RESET} You are not on the expected branch"
    
    # Check if the expected branch exists
    pushd "${tekton_root}" > /dev/null
    if branch_exists_local "${expected_branch}"; then
      echo "The expected branch exists locally. To switch to it:"
      echo "git checkout ${expected_branch}"
    elif branch_exists_remote "${expected_branch}"; then
      echo "The expected branch exists on the remote. To fetch and switch to it:"
      echo "git fetch origin && git checkout ${expected_branch}"
    else
      echo "The expected branch does not exist locally or remotely. To create it:"
      echo "${SCRIPT_DIR}/tekton-branch-create ${expected_branch}"
    fi
    popd > /dev/null
  fi
fi

# Set exit code based on verification result
if [[ "${verification_result}" == "success" ]]; then
  exit 0
elif [[ "${verification_result}" == "warning" ]]; then
  exit 2
else
  exit 1
fi