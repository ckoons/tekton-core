#!/usr/bin/env bash
#
# tekton-branch-sync - Synchronize branches across Tekton components
#
# This script synchronizes changes between branches across multiple Tekton
# components, detecting conflicts and providing resolution assistance.

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/lib"

# shellcheck source=lib/github-utils.sh
source "${LIB_DIR}/github-utils.sh"
# shellcheck source=lib/error-utils.sh
source "${LIB_DIR}/error-utils.sh"
# shellcheck source=lib/component-utils.sh
source "${LIB_DIR}/component-utils.sh"

# Function to display usage information
usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTIONS] SOURCE_BRANCH TARGET_BRANCH

Synchronize changes between branches across Tekton components, detecting
conflicts and providing resolution assistance.

Options:
  -h, --help           Display this help message and exit
  -v, --verbose        Enable verbose output
  -d, --dry-run        Show what would be done without making changes
  -f, --force          Force synchronization even if conflicts are detected
  -c, --components     Only synchronize component repositories
  -m, --main-only      Only synchronize main repository
  -p, --push           Push changes after synchronization
  -s, --strategy STR   Merge strategy to use (merge, rebase, cherry-pick)
  
Arguments:
  SOURCE_BRANCH        Source branch containing changes to synchronize
  TARGET_BRANCH        Target branch to synchronize changes to

Examples:
  $(basename "$0") sprint/feature-a-250430 sprint/feature-b-250430
    Synchronize changes from feature-a to feature-b across all repositories

  $(basename "$0") -s rebase -p main sprint/feature-name-250430
    Rebase feature branch on main branch and push changes

EOF
  exit 1
}

# Parse arguments
verbose=false
dry_run=false
force_sync=false
components_only=false
main_only=false
push_changes=false
merge_strategy="merge"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -v|--verbose)
      verbose=true
      enable_debug
      shift
      ;;
    -d|--dry-run)
      dry_run=true
      shift
      ;;
    -f|--force)
      force_sync=true
      shift
      ;;
    -c|--components)
      components_only=true
      shift
      ;;
    -m|--main-only)
      main_only=true
      shift
      ;;
    -p|--push)
      push_changes=true
      shift
      ;;
    -s|--strategy)
      merge_strategy="$2"
      shift 2
      ;;
    -*)
      error_exit "Unknown option: $1"
      ;;
    *)
      break
      ;;
  esac
done

# Validate arguments
if [[ $# -lt 2 ]]; then
  error_exit "Missing required arguments. Need SOURCE_BRANCH and TARGET_BRANCH."
fi

source_branch="$1"
target_branch="$2"

# Validate merge strategy
if [[ "${merge_strategy}" != "merge" && "${merge_strategy}" != "rebase" && "${merge_strategy}" != "cherry-pick" ]]; then
  error_exit "Invalid merge strategy: ${merge_strategy}. Must be one of: merge, rebase, or cherry-pick."
fi

# Get Tekton root directory
tekton_root="$(detect_tekton_root)"
if [[ -z "${tekton_root}" ]]; then
  error_exit "Not in a Tekton repository. Please run this script from within the Tekton project directory."
fi

# Check if both --components and --main-only are specified
if [[ "${components_only}" == "true" && "${main_only}" == "true" ]]; then
  error_exit "Cannot specify both --components and --main-only"
fi

# Function to synchronize branches in a repository
sync_branches_in_repo() {
  local repo_dir="$1"
  local repo_name="$2"
  local result=0
  
  pushd "${repo_dir}" > /dev/null
  
  # Check if this is a git repository
  if ! check_git_repo; then
    warn "${repo_name} is not a git repository, skipping"
    popd > /dev/null
    return 1
  fi
  
  # Get current branch to restore later
  local original_branch
  original_branch="$(get_current_branch)"
  if [[ -z "${original_branch}" ]]; then
    warn "Not on a branch in ${repo_name}, skipping"
    popd > /dev/null
    return 1
  fi
  
  # Check if source branch exists
  if ! branch_exists_local "${source_branch}"; then
    if branch_exists_remote "${source_branch}"; then
      info "Source branch '${source_branch}' exists only on remote in ${repo_name}, fetching"
      if [[ "${dry_run}" != "true" ]]; then
        git fetch origin "${source_branch}" || {
          warn "Failed to fetch source branch '${source_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
        git checkout -b "${source_branch}" "origin/${source_branch}" || {
          warn "Failed to checkout source branch '${source_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
      else
        info "[DRY RUN] Would fetch and checkout source branch '${source_branch}'"
      fi
    else
      warn "Source branch '${source_branch}' does not exist locally or remotely in ${repo_name}, skipping"
      popd > /dev/null
      return 1
    fi
  fi
  
  # Check if target branch exists
  if ! branch_exists_local "${target_branch}"; then
    if branch_exists_remote "${target_branch}"; then
      info "Target branch '${target_branch}' exists only on remote in ${repo_name}, fetching"
      if [[ "${dry_run}" != "true" ]]; then
        git fetch origin "${target_branch}" || {
          warn "Failed to fetch target branch '${target_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
        git checkout -b "${target_branch}" "origin/${target_branch}" || {
          warn "Failed to checkout target branch '${target_branch}' in ${repo_name}, skipping"
          popd > /dev/null
          return 1
        }
      else
        info "[DRY RUN] Would fetch and checkout target branch '${target_branch}'"
      fi
    else
      warn "Target branch '${target_branch}' does not exist locally or remotely in ${repo_name}, skipping"
      popd > /dev/null
      return 1
    fi
  fi
  
  # Check for uncommitted changes
  if ! is_working_directory_clean; then
    warn "Working directory is not clean in ${repo_name}, stashing changes"
    if [[ "${dry_run}" != "true" ]]; then
      git stash save "Stashed by tekton-branch-sync before synchronization" || {
        error_exit "Failed to stash changes in ${repo_name}"
      }
    else
      info "[DRY RUN] Would stash uncommitted changes"
    fi
  fi
  
  # Perform synchronization based on selected strategy
  info "Synchronizing '${source_branch}' to '${target_branch}' in ${repo_name} using ${merge_strategy} strategy"
  
  if [[ "${dry_run}" != "true" ]]; then
    # Make sure branches are up to date with remote
    git fetch origin "${source_branch}" "${target_branch}" || warn "Failed to fetch latest branch updates"
    
    # Checkout target branch
    git checkout "${target_branch}" || {
      error_exit "Failed to checkout target branch '${target_branch}' in ${repo_name}"
    }
    
    # Apply changes using selected strategy
    case "${merge_strategy}" in
      "merge")
        if git merge "${source_branch}" --no-edit; then
          success "Successfully merged '${source_branch}' into '${target_branch}' in ${repo_name}"
        else
          warn "Merge conflicts detected in ${repo_name}"
          if [[ "${force_sync}" == "true" ]]; then
            warn "Force flag set, aborting merge and continuing"
            git merge --abort
            result=1
          else
            error_exit "Merge conflicts detected in ${repo_name}. Resolve conflicts and commit, or use --force to skip conflicted repositories."
          fi
        fi
        ;;
      
      "rebase")
        if git rebase "${source_branch}"; then
          success "Successfully rebased '${target_branch}' onto '${source_branch}' in ${repo_name}"
        else
          warn "Rebase conflicts detected in ${repo_name}"
          if [[ "${force_sync}" == "true" ]]; then
            warn "Force flag set, aborting rebase and continuing"
            git rebase --abort
            result=1
          else
            error_exit "Rebase conflicts detected in ${repo_name}. Resolve conflicts and continue rebase, or use --force to skip conflicted repositories."
          fi
        fi
        ;;
      
      "cherry-pick")
        # Get range of commits to cherry-pick
        local commit_range
        commit_range=$(git rev-list "${target_branch}..${source_branch}")
        
        if [[ -z "${commit_range}" ]]; then
          info "No commits to cherry-pick from '${source_branch}' to '${target_branch}' in ${repo_name}"
        else
          # Cherry-pick each commit in reverse order (oldest first)
          local cherry_pick_success=true
          for commit in $(echo "${commit_range}" | tac); do
            if ! git cherry-pick "${commit}"; then
              warn "Cherry-pick conflict detected for commit ${commit} in ${repo_name}"
              if [[ "${force_sync}" == "true" ]]; then
                warn "Force flag set, aborting cherry-pick and continuing"
                git cherry-pick --abort
                cherry_pick_success=false
                result=1
                break
              else
                error_exit "Cherry-pick conflict detected in ${repo_name}. Resolve conflicts and continue cherry-pick, or use --force to skip conflicted repositories."
              fi
            fi
          done
          
          if [[ "${cherry_pick_success}" == "true" ]]; then
            success "Successfully cherry-picked commits from '${source_branch}' to '${target_branch}' in ${repo_name}"
          fi
        fi
        ;;
    esac
    
    # Push changes if requested
    if [[ "${push_changes}" == "true" && ${result} -eq 0 ]]; then
      info "Pushing changes to remote in ${repo_name}"
      if git push origin "${target_branch}"; then
        success "Successfully pushed changes to remote in ${repo_name}"
      else
        warn "Failed to push changes to remote in ${repo_name}"
        result=1
      fi
    fi
    
    # Restore original branch
    git checkout "${original_branch}" || warn "Failed to restore original branch '${original_branch}' in ${repo_name}"
    
    # Restore stashed changes if any
    if [[ "$(git stash list | grep -c "Stashed by tekton-branch-sync before synchronization")" -gt 0 ]]; then
      info "Restoring stashed changes in ${repo_name}"
      git stash pop || warn "Failed to restore stashed changes in ${repo_name}"
    fi
  else
    # Dry run mode, just show what would be done
    info "[DRY RUN] Would ${merge_strategy} '${source_branch}' into '${target_branch}' in ${repo_name}"
    if [[ "${push_changes}" == "true" ]]; then
      info "[DRY RUN] Would push changes to remote"
    fi
  fi
  
  popd > /dev/null
  return ${result}
}

# Initialize results tracking
declare -a successful_repos
declare -a failed_repos
declare -a skipped_repos

# Synchronize main repository if requested
if [[ "${components_only}" != "true" ]]; then
  info "Synchronizing branches in main Tekton repository"
  if sync_branches_in_repo "${tekton_root}" "Tekton"; then
    successful_repos+=("Tekton")
  else
    if [[ "${dry_run}" == "true" ]]; then
      skipped_repos+=("Tekton")
    else
      failed_repos+=("Tekton")
    fi
  fi
fi

# Synchronize component repositories if requested
if [[ "${main_only}" != "true" ]]; then
  info "Synchronizing branches in component repositories"
  
  # Get list of all components with repositories
  component_repos=($(list_component_repos))
  
  if [[ ${#component_repos[@]} -eq 0 ]]; then
    warn "No component repositories found"
  else
    for component in "${component_repos[@]}"; do
      component_dir="$(get_component_directory "${component}")"
      if [[ -z "${component_dir}" ]]; then
        warn "Component directory not found for ${component}, skipping"
        skipped_repos+=("${component}")
        continue
      fi
      
      info "Processing component: ${component}"
      if sync_branches_in_repo "${component_dir}" "${component}"; then
        successful_repos+=("${component}")
      else
        if [[ "${dry_run}" == "true" ]]; then
          skipped_repos+=("${component}")
        else
          failed_repos+=("${component}")
        fi
      fi
    done
  fi
fi

# Print summary
if [[ "${dry_run}" == "true" ]]; then
  echo -e "\nDry Run Summary:"
  echo -e "----------------"
  echo -e "Would synchronize branches in ${#successful_repos[@]} repositories"
  echo -e "Would skip ${#skipped_repos[@]} repositories"
else
  echo -e "\nSynchronization Summary:"
  echo -e "------------------------"
  echo -e "Successfully synchronized: ${#successful_repos[@]}"
  echo -e "Failed to synchronize: ${#failed_repos[@]}"
  echo -e "Skipped: ${#skipped_repos[@]}"
  
  if [[ ${#successful_repos[@]} -gt 0 ]]; then
    echo -e "\nSuccessful repositories:"
    for repo in "${successful_repos[@]}"; do
      echo -e "  - ${repo}"
    done
  fi
  
  if [[ ${#failed_repos[@]} -gt 0 ]]; then
    echo -e "\nFailed repositories:"
    for repo in "${failed_repos[@]}"; do
      echo -e "  - ${repo}"
    done
  fi
  
  if [[ ${#skipped_repos[@]} -gt 0 ]]; then
    echo -e "\nSkipped repositories:"
    for repo in "${skipped_repos[@]}"; do
      echo -e "  - ${repo}"
    done
  fi
fi

# Provide next steps
echo -e "\nNext Steps:"
if [[ ${#failed_repos[@]} -gt 0 && "${force_sync}" != "true" ]]; then
  echo -e "- Resolve conflicts in failed repositories and commit changes"
  echo -e "- Re-run synchronization with the --force flag to skip repositories with conflicts"
elif [[ "${push_changes}" != "true" && "${dry_run}" != "true" ]]; then
  echo -e "- Review synchronized branches and push changes with:"
  echo -e "  $(basename "$0") --push ${source_branch} ${target_branch}"
fi
echo -e "- Check branch status with:"
echo -e "  ${SCRIPT_DIR}/tekton-branch-status ${target_branch}"

if [[ ${#failed_repos[@]} -gt 0 ]]; then
  exit 1
else
  exit 0
fi