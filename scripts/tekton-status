#!/usr/bin/env bash
# tekton-status - Script to show the status of Tekton components
# Created: April 1, 2025
# Updated: May 1, 2025 - Refactored to use shared utility libraries

# Debug mode (set to false for production use)
DEBUG_PATH=false

# Use TEKTON_ROOT if it's set, otherwise find Tekton root directory
if [[ -n "${TEKTON_ROOT}" ]]; then
    TEKTON_DIR="${TEKTON_ROOT}"
    SCRIPT_DIR="${TEKTON_DIR}/scripts"
    
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Using TEKTON_ROOT: $TEKTON_ROOT" >&2
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Set SCRIPT_DIR to: $SCRIPT_DIR" >&2
else
    # Determine the script location, handling symlinks
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: BASH_SOURCE[0] = ${BASH_SOURCE[0]}" >&2
    
    if [[ -L "${BASH_SOURCE[0]}" ]]; then
        # This is a symlink, resolve it
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: File is a symlink" >&2
        
        SOURCE_LINK=$(readlink "${BASH_SOURCE[0]}")
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Symlink points to: $SOURCE_LINK" >&2
        
        if [[ "$SOURCE_LINK" == /* ]]; then
            # Absolute path
            REAL_SCRIPT="$SOURCE_LINK"
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Using absolute path: $REAL_SCRIPT" >&2
        else
            # Relative path
            SCRIPT_PARENT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
            REAL_SCRIPT="$SCRIPT_PARENT/$SOURCE_LINK"
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Using relative path:" >&2
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: SCRIPT_PARENT = $SCRIPT_PARENT" >&2
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: REAL_SCRIPT = $REAL_SCRIPT" >&2
        fi
        
        SCRIPT_DIR="$( cd "$( dirname "$REAL_SCRIPT" )" && pwd )"
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: SCRIPT_DIR set to: $SCRIPT_DIR" >&2
    else
        # Not a symlink, use the standard path
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: File is not a symlink" >&2
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: SCRIPT_DIR set to: $SCRIPT_DIR" >&2
    fi
    
    # Check if we're in a utils directory
    if [[ "$SCRIPT_DIR" == *"/utils" ]]; then
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Script running from a utils directory" >&2
        
        # Extract the Tekton scripts directory from the resolved symlink path
        if [[ "$REAL_SCRIPT" == */scripts/* ]]; then
            # Get the part before /scripts/
            TEKTON_DIR=$(echo "$REAL_SCRIPT" | sed 's/\/scripts\/.*$//')
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: TEKTON_DIR set to: $TEKTON_DIR (from /scripts/ in path)" >&2
        else
            # Fallback - try using the symlink directly to figure out the path
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Path doesn't contain /scripts/" >&2
            
            # Get the Tekton root by looking for a scripts dir in the path
            if [[ "$SOURCE_LINK" == */Tekton/scripts/* ]]; then
                TEKTON_DIR=$(echo "$SOURCE_LINK" | sed 's/\/scripts\/.*$//')
                [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: TEKTON_DIR set to: $TEKTON_DIR (from SOURCE_LINK)" >&2
            else
                [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Cannot determine Tekton root directory from symlink" >&2
                echo "ERROR: Cannot determine Tekton root directory from symlink" >&2
                exit 1
            fi
        fi
    else
        # Standard case - script is in the Tekton/scripts directory
        TEKTON_DIR="$( cd "$SCRIPT_DIR/.." && pwd )"
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Standard case - TEKTON_DIR is parent of SCRIPT_DIR: $TEKTON_DIR" >&2
    fi
    
    # Set TEKTON_ROOT for consistency
    export TEKTON_ROOT="${TEKTON_DIR}"
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Set TEKTON_ROOT to: $TEKTON_ROOT" >&2
fi

# Load shared libraries
LIB_DIR="${SCRIPT_DIR}/lib"
source "${LIB_DIR}/tekton-utils.sh"
source "${LIB_DIR}/tekton-ports.sh"
source "${LIB_DIR}/tekton-process.sh"
source "${LIB_DIR}/tekton-config.sh"

# Ensure we're in the correct directory context
cd "$TEKTON_DIR"

# Display banner
tekton_info "=== Tekton System Status ==="
tekton_info "Tekton installation: ${TEKTON_COLOR_YELLOW}$TEKTON_DIR${TEKTON_COLOR_RESET}"
echo ""

# Check for Hermes lifecycle management mode
tekton_info "Lifecycle Management Status:"
if tekton_is_running "hermes.*database.manager" || tekton_is_running "hermes/api/app.py" || tekton_is_running "hermes.*service_discovery" || tekton_is_running "hermes.api.app" || tekton_is_running "uvicorn hermes.api.app"; then
    tekton_success "✓ Hermes is running and may be managing component lifecycle"
    
    # Check for specific components
    COMPONENTS_RUNNING=""
    if tekton_is_running "hermes.*database.manager"; then
        COMPONENTS_RUNNING="$COMPONENTS_RUNNING Database Manager"
    fi
    if tekton_is_running "hermes/api/app.py" || tekton_is_running "hermes.api.app" || tekton_is_running "uvicorn hermes.api.app"; then
        if [ -n "$COMPONENTS_RUNNING" ]; then
            COMPONENTS_RUNNING="$COMPONENTS_RUNNING,"
        fi
        COMPONENTS_RUNNING="$COMPONENTS_RUNNING API Server"
    fi
    if tekton_is_running "hermes.*service_discovery"; then
        if [ -n "$COMPONENTS_RUNNING" ]; then
            COMPONENTS_RUNNING="$COMPONENTS_RUNNING,"
        fi
        COMPONENTS_RUNNING="$COMPONENTS_RUNNING Service Discovery"
    fi
    
    if [ -n "$COMPONENTS_RUNNING" ]; then
        tekton_success "✓ Running Hermes components:  $COMPONENTS_RUNNING"
    fi
    
    # Check if lifecycle management is enabled by querying the API
    if tekton_is_port_responding "$HERMES_PORT" "localhost" "/api/lifecycle/status"; then
        LIFECYCLE_STATUS=$(curl -s "http://localhost:${HERMES_PORT}/api/lifecycle/status" | grep -o '"enabled":[^,}]*' | cut -d ":" -f2)
        if [[ "$LIFECYCLE_STATUS" == *"true"* ]]; then
            tekton_success "✓ Hermes lifecycle management is ENABLED"
        else
            tekton_info "Hermes lifecycle management is disabled (normal during testing)"
        fi
    else
        tekton_info "Hermes lifecycle management API not detected (normal during testing)"
    fi
else
    tekton_error_exit "✗ Hermes is not running. Component lifecycle management is unavailable" 0
fi

echo ""
tekton_info "Hermes Service Registry:"
if tekton_is_port_responding "$HERMES_PORT" "localhost" ""; then
    tekton_success "✓ Hermes service registry is accessible"
    
    # Try Hermes registry directly
    REGISTERED_SERVICES=$(curl -s -X POST "http://localhost:${HERMES_PORT}/api/query" -H "Content-Type: application/json" -d '{}' 2>/dev/null | tr -d '[]{}' | tr ',' '\n' | grep -o '"name":"[^"]*"' | cut -d ':' -f2 | tr -d '"')
    
    # Check if empty, try the component registry endpoint as an alternative
    if [ -z "$REGISTERED_SERVICES" ]; then
        REGISTERED_SERVICES=$(curl -s "http://localhost:${HERMES_PORT}/api/registry/components" 2>/dev/null | tr -d '[]{}' | tr ',' '\n' | grep -o '"name":"[^"]*"' | cut -d ':' -f2 | tr -d '"')
    fi
    
    if [ -n "$REGISTERED_SERVICES" ]; then
        tekton_success "✓ Registered services:"
        echo "$REGISTERED_SERVICES" | while read service; do
            echo -e "  - $service"
        done
    else
        # Not an error - just informational during testing
        tekton_info "No services currently registered with Hermes"
        tekton_info "This is expected during a testing session - registration happens during full deployment"
    fi
else
    tekton_error_exit "Hermes service registry not accessible" 0
fi

echo ""
tekton_info "MCP Protocol Status:"

# Check if Hermes is running
if tekton_is_port_responding "$HERMES_PORT"; then
    # Try Hermes MCP capabilities - central hub for MCP
    MCP_RESPONSE=$(curl -s -X POST "http://localhost:${HERMES_PORT}/api/mcp/capabilities" -H "Content-Type: application/json" -d '{}' 2>/dev/null)
    
    if [[ "$MCP_RESPONSE" == *"modalities"* ]]; then
        tekton_success "✓ Hermes MCP protocol hub is available"
        
        # Extract the available modalities
        MODALITIES=$(echo "$MCP_RESPONSE" | grep -o '"modalities":\[[^]]*\]' | grep -o '"[^"]*"' | tr -d '"' | sort | uniq)
        if [ -n "$MODALITIES" ]; then
            echo -e "  Supported modalities:"
            echo "$MODALITIES" | while read modality; do
                echo -e "    - $modality"
            done
        fi
        
        # Inform that MCP is centralized through Hermes
        tekton_info "Hermes provides centralized MCP capabilities for most components"
    else
        tekton_warn "⚠ Hermes MCP protocol hub is not responding properly"
    fi
    
    # Only check Engram directly as it has its own MCP implementation
    ENGRAM_PORT=$(tekton_get_component_port "engram")
    if [ -n "$ENGRAM_PORT" ] && [ "$ENGRAM_PORT" -ne 0 ] && tekton_is_port_used "$ENGRAM_PORT"; then
        # Try to access Engram MCP capabilities
        MCP_RESPONSE=$(curl -s -X POST "http://localhost:${ENGRAM_PORT}/api/mcp/capabilities" -H "Content-Type: application/json" -d '{}' 2>/dev/null)
        if [[ "$MCP_RESPONSE" == *"modalities"* ]]; then
            tekton_success "✓ Engram direct MCP protocol is available"
            
            # Extract modalities if available
            MODALITIES=$(echo "$MCP_RESPONSE" | grep -o '"modalities":\[[^]]*\]' | grep -o '"[^"]*"' | tr -d '"' | sort | uniq)
            if [ -n "$MODALITIES" ]; then
                echo -e "  Supported modalities: $(echo $MODALITIES | tr '\n' ' ')"
            fi
        else
            tekton_info "Engram direct MCP access not detected (available through Hermes)"
        fi
    fi
else
    tekton_error_exit "✗ Hermes is not running - MCP hub not available" 0
fi

echo ""
tekton_info "Tekton Component Status:"

# Use simpler array approach with component:port:name format
COMPONENTS=(
    "engram:8000:Engram Memory System"
    "hermes:8001:Hermes Messaging System"
    "ergon:8002:Ergon Agent Framework"
    "rhetor:8003:Rhetor LLM Manager"
    "terma:8004:Terma CLI"
    "athena:8005:Athena Knowledge Graph"
    "prometheus:8006:Prometheus Planning System"
    "harmonia:8007:Harmonia Workflow System"
    "telos:8008:Telos Requirements System"
    "synthesis:8009:Synthesis Execution Engine"
    "tekton_core:8010:Tekton Core"
    "metis:8011:Metis Task Management"
    "apollo:8012:Apollo Attention System"
    "hephaestus:8080:Hephaestus UI"
)

# Check each component by port
for component in "${COMPONENTS[@]}"; do
    component_id=$(echo "$component" | cut -d ":" -f1)
    port=$(echo "$component" | cut -d ":" -f2)
    name=$(echo "$component" | cut -d ":" -f3)
    
    # Check if port is in use
    if tekton_is_port_used "$port"; then
        # Get the process using this port
        process_info=$(tekton_get_port_process "$port")
        
        # Check if port is responding
        if tekton_is_port_responding "$port" "localhost" ""; then
            tekton_success "✓ $name is running on port $port and responding"
            
            # Try to get health status
            health_response=$(curl -s --max-time 1 "http://localhost:${port}/health" 2>/dev/null)
            
            if [[ "$health_response" == *"status"* ]]; then
                status=$(echo "$health_response" | grep -o '"status":"[^"]*"' | cut -d ':' -f2 | tr -d '"')
                if [[ "$status" == "ok" || "$status" == "healthy" ]]; then
                    echo "  Health status: $status"
                else
                    tekton_warn "  Health status: $status"
                fi
            fi
            
            # Show process info
            if [ -n "$process_info" ]; then
                echo "  Process: ${process_info:0:80}"
            fi
        else
            tekton_warn "✓ $name is running on port $port but not responding to HTTP requests"
            
            # Show process info
            if [ -n "$process_info" ]; then
                echo "  Process: ${process_info:0:80}"
            fi
        fi
    else
        # For essential components, report as error; for others, just info
        if [[ "$component_id" == "engram" || "$component_id" == "hermes" || "$component_id" == "rhetor" ]]; then
            tekton_error_exit "✗ $name is not running (port $port not in use)" 0
        else
            tekton_info "$name is not running (port $port not in use)"
        fi
    fi
done

echo ""
tekton_info "Port Status:"

# Get all component ports and check their status
for component_id in engram hermes ergon rhetor terma athena prometheus harmonia telos synthesis metis apollo hephaestus tekton-core llm-adapter; do
    port=$(tekton_get_component_port "$component_id")
    
    if [ -n "$port" ] && [ "$port" -ne 0 ]; then
        component_name=$(echo "$component_id" | tr '[:lower:]' '[:upper:]')
        
        if tekton_is_port_used "$port"; then
            # Get the process using this port
            process_info=$(tekton_get_port_process "$port")
            if [ -n "$process_info" ]; then
                pid=$(echo "$process_info" | cut -f1)
                process=$(echo "$process_info" | cut -f2-)
                tekton_warn "Port $port ($component_name): In use by PID $pid"
                echo -e "  ${TEKTON_COLOR_YELLOW}Process: ${process:0:80}${TEKTON_COLOR_RESET}"
            else
                tekton_warn "Port $port ($component_name): In use (process unknown)"
            fi
        else
            tekton_success "Port $port ($component_name): Available"
        fi
    fi
done

echo ""
tekton_info "UI Services:"
if tekton_is_port_used "$HEPHAESTUS_PORT" && tekton_is_port_responding "$HEPHAESTUS_PORT"; then
    tekton_success "✓ Hephaestus UI is running"
    echo -e "  Access the UI at: http://localhost:$HEPHAESTUS_PORT"
else
    tekton_info "Hephaestus UI is not running (normal during component testing)"
fi

echo ""
tekton_info "Database Services:"
if tekton_is_running ".*faiss_adapter.*"; then
    tekton_success "✓ FAISS vector database is running"
else
    tekton_warn "No vector database service detected"
fi

# Check for Redis (common key-value store)
if tekton_command_exists "redis-cli"; then
    if redis-cli ping >/dev/null 2>&1; then
        tekton_success "✓ Redis key-value store is running"
    else
        tekton_error_exit "✗ Redis key-value store is not running" 0
    fi
fi

echo ""
tekton_info "LLM Availability:"

# Check Ollama status
if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
    tekton_success "✓ Ollama is running"
    
    # Try to list available models
    MODELS=$(curl -s http://localhost:11434/api/tags | grep -o '"name":"[^"]*"' | cut -d ":" -f2 | tr -d '"' | sort)
    if [ -n "$MODELS" ]; then
        echo -e "  Available models:"
        echo "$MODELS" | while read model; do
            echo -e "    - $model"
        done
    fi
else
    tekton_error_exit "✗ Ollama is not running" 0
fi

# Check for Claude API
if [ -n "$ANTHROPIC_API_KEY" ] || [ -f ~/.anthropic-access-tokens ]; then
    tekton_success "✓ Claude API is configured"
else
    tekton_error_exit "✗ Claude API is not configured" 0
fi

# Check for OpenAI API
if [ -n "$OPENAI_API_KEY" ]; then
    tekton_success "✓ OpenAI API is configured"
else
    tekton_error_exit "✗ OpenAI API is not configured" 0
fi

echo ""
tekton_info "System Resources:"

# Get OS type for system-specific commands
OS_TYPE=$(tekton_detect_os)

# Show memory usage
if [[ "$OS_TYPE" == "linux" ]]; then
    # Linux
    if tekton_command_exists "free"; then
        MEM_TOTAL=$(free -h | awk '/^Mem:/ {print $2}')
        MEM_USED=$(free -h | awk '/^Mem:/ {print $3}')
        MEM_PERCENT=$(free | awk '/^Mem:/ {printf("%.1f%%", $3/$2 * 100)}')
        tekton_info "Memory Usage:"
        echo -e "  ${MEM_USED} used / ${MEM_TOTAL} total (${MEM_PERCENT})"
    fi
elif [[ "$OS_TYPE" == "darwin" ]]; then
    # macOS
    if tekton_command_exists "vm_stat"; then
        MEM_TOTAL=$(( $(sysctl -n hw.memsize) / 1024 / 1024 / 1024 ))
        PAGE_SIZE=$(vm_stat | grep "page size" | awk '{print $8}')
        PAGES_FREE=$(vm_stat | grep "Pages free" | awk '{print $3}' | tr -d '.')
        PAGES_ACTIVE=$(vm_stat | grep "Pages active" | awk '{print $3}' | tr -d '.')
        PAGES_INACTIVE=$(vm_stat | grep "Pages inactive" | awk '{print $3}' | tr -d '.')
        PAGES_SPECULATIVE=$(vm_stat | grep "Pages speculative" | awk '{print $3}' | tr -d '.')
        PAGES_WIRED=$(vm_stat | grep "Pages wired down" | awk '{print $4}' | tr -d '.')
        
        MEM_USED=$(( (PAGES_ACTIVE + PAGES_WIRED) * PAGE_SIZE / 1024 / 1024 / 1024 ))
        MEM_PERCENT=$(( MEM_USED * 100 / MEM_TOTAL ))
        
        tekton_info "Memory Usage:"
        echo -e "  ${MEM_USED}Gi used / ${MEM_TOTAL}.0Gi total (${MEM_PERCENT}.${MEM_PERCENT}%)"
    fi
fi

# Show CPU usage
if tekton_command_exists "top"; then
    if [[ "$OS_TYPE" == "darwin" ]]; then
        # macOS
        CPU_USAGE=$(top -l 1 -n 0 | grep "CPU usage" | awk '{print $3, $5, $7}')
        tekton_info "CPU Usage:"
        echo -e "  $CPU_USAGE"
    else
        # Linux
        CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')
        tekton_info "CPU Usage:"
        echo -e "  $CPU_USAGE"
    fi
fi

# Show disk usage
if tekton_command_exists "df"; then
    DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')
    DISK_USED=$(df -h / | awk 'NR==2 {print $3}')
    DISK_PERCENT=$(df -h / | awk 'NR==2 {print $5}')
    
    tekton_info "Disk Usage:"
    echo -e "  ${DISK_USED} used / ${DISK_TOTAL} total (${DISK_PERCENT} used)"
fi

echo ""
tekton_info "=== Tekton Status Check Complete ==="