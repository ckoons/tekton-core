#!/bin/bash
# tekton-status - Script to show the status of Tekton components
# Created: April 1, 2025
# Updated: April 19, 2025 - Enhanced port status reporting

# ANSI color codes for terminal output
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
BOLD="\033[1m"
RESET="\033[0m"

# Find Tekton root directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [[ "$SCRIPT_DIR" == *"/utils" ]]; then
    # Script is running from a symlink in utils
    TEKTON_DIR=$(cd "$SCRIPT_DIR" && cd "$(readlink "${BASH_SOURCE[0]}" | xargs dirname | xargs dirname)" && pwd)
else
    # Script is running from Tekton/scripts
    TEKTON_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
fi

# Ensure we're in the correct directory context
cd "$TEKTON_DIR"

# Function to check if a process is running
is_running() {
    pgrep -f "$1" >/dev/null
    return $?
}

# Function to check if a port is in use
is_port_used() {
    lsof -ti :"$1" >/dev/null 2>&1
    return $?
}

# Function to get the process using a specific port
get_port_process() {
    local port="$1"
    local pid=$(lsof -ti :"$port" 2>/dev/null)
    
    if [ -n "$pid" ]; then
        local process=$(ps -p "$pid" -o args= 2>/dev/null)
        echo "$pid"$'\t'"$process"
    else
        echo ""
    fi
}

# Display banner
echo -e "${BLUE}${BOLD}=== Tekton System Status ===${RESET}"
echo -e "${BLUE}Tekton installation: ${YELLOW}$TEKTON_DIR${RESET}"
echo ""

# Check for Hermes lifecycle management mode
echo -e "${BLUE}${BOLD}Lifecycle Management Status:${RESET}"
if is_running "hermes.*database.manager" || is_running "hermes/api/app.py" || is_running "hermes.*service_discovery"; then
    echo -e "${GREEN}✓ Hermes is running and may be managing component lifecycle${RESET}"
    
    # Check for specific components
    COMPONENTS_RUNNING=""
    if is_running "hermes.*database.manager"; then
        COMPONENTS_RUNNING="$COMPONENTS_RUNNING Database Manager"
    fi
    if is_running "hermes/api/app.py"; then
        if [ -n "$COMPONENTS_RUNNING" ]; then
            COMPONENTS_RUNNING="$COMPONENTS_RUNNING,"
        fi
        COMPONENTS_RUNNING="$COMPONENTS_RUNNING API Server"
    fi
    if is_running "hermes.*service_discovery"; then
        if [ -n "$COMPONENTS_RUNNING" ]; then
            COMPONENTS_RUNNING="$COMPONENTS_RUNNING,"
        fi
        COMPONENTS_RUNNING="$COMPONENTS_RUNNING Service Discovery"
    fi
    
    if [ -n "$COMPONENTS_RUNNING" ]; then
        echo -e "${GREEN}✓ Running Hermes components:${RESET}  $COMPONENTS_RUNNING"
    fi
    
    # Check if lifecycle management is enabled by querying the API
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8100/api/lifecycle/status" | grep -q "200"; then
        LIFECYCLE_STATUS=$(curl -s "http://localhost:8100/api/lifecycle/status" | grep -o '"enabled":[^,}]*' | cut -d ":" -f2)
        if [[ "$LIFECYCLE_STATUS" == *"true"* ]]; then
            echo -e "${GREEN}✓ Hermes lifecycle management is ENABLED${RESET}"
        else
            echo -e "${YELLOW}⚠ Hermes is running but lifecycle management is DISABLED${RESET}"
        fi
    else
        echo -e "${YELLOW}⚠ Hermes is running but lifecycle management is DISABLED${RESET}"
    fi
else
    echo -e "${RED}✗ Hermes is not running${RESET}"
    echo -e "${YELLOW}  Component lifecycle management is unavailable${RESET}"
fi

echo ""
echo -e "${BLUE}${BOLD}Hermes Service Registry:${RESET}"
if curl -s "http://localhost:8100/api/registry/services" > /dev/null 2>&1; then
    echo -e "${GREEN}Hermes service registry is accessible${RESET}"
    
    # Display registered services
    REGISTERED_SERVICES=$(curl -s "http://localhost:8100/api/registry/services" | tr -d '[]{}' | tr ',' '\n' | grep -o '"name":"[^"]*"' | cut -d ':' -f2 | tr -d '"')
    
    if [ -n "$REGISTERED_SERVICES" ]; then
        echo -e "${GREEN}Registered services:${RESET}"
        echo "$REGISTERED_SERVICES" | while read service; do
            echo -e "  - $service"
        done
    else
        echo -e "${YELLOW}No services currently registered${RESET}"
    fi
else
    echo -e "${RED}Hermes service registry not accessible${RESET}"
fi

echo ""
echo -e "${BLUE}${BOLD}Tekton Component Status:${RESET}"

# List of components and their process patterns
COMPONENTS=(
    "engram.api.consolidated_server:Engram Memory Service"
    "engram_with_claude:Engram with Claude"
    "engram_with_ollama:Engram with Ollama"
    "ollama_bridge.py:Ollama Bridge"
    "hermes.*database.manager:Hermes Database Manager"
    "hermes/api/app.py:Hermes API Server"
    "hermes.*service_discovery:Hermes Service Registry"
    "prometheus.core:Prometheus Planning Engine"
    "rhetor.core:Rhetor Communication Engine"
    "telos.core:Telos User Interface"
    "harmonia.core:Harmonia Workflow Engine"
    "athena.core:Athena Knowledge Graph"
    "Hephaestus/ui/server/server.py:Hephaestus UI Server"
)

# Check each component
for component in "${COMPONENTS[@]}"; do
    pattern=$(echo "$component" | cut -d ":" -f1)
    name=$(echo "$component" | cut -d ":" -f2)
    
    if is_running "$pattern"; then
        echo -e "${GREEN}✓ $name is running${RESET}"
        # Get PIDs
        PIDS=$(pgrep -f "$pattern")
        echo "  PIDs: $PIDS"
    else
        echo -e "${RED}✗ $name is not running${RESET}"
    fi
done

echo ""
echo -e "${BLUE}${BOLD}Port Status:${RESET}"

# Check Hephaestus UI ports
if is_port_used 8080; then
    process_info=$(get_port_process 8080)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 8080 (Hephaestus HTTP): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 8080 (Hephaestus HTTP): Available${RESET}"
fi

if is_port_used 8081; then
    process_info=$(get_port_process 8081)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 8081 (Hephaestus WebSocket): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 8081 (Hephaestus WebSocket): Available${RESET}"
fi

# Engram port
if is_port_used 8000; then
    process_info=$(get_port_process 8000)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 8000 (Engram Memory): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 8000 (Engram Memory): Available${RESET}"
fi

# Hermes ports
if is_port_used 8100; then
    process_info=$(get_port_process 8100)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 8100 (Hermes Service Registry): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 8100 (Hermes Service Registry): Available${RESET}"
fi

if is_port_used 8101; then
    process_info=$(get_port_process 8101)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 8101 (Hermes Database): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 8101 (Hermes Database): Available${RESET}"
fi

# Ergon port
if is_port_used 8200; then
    process_info=$(get_port_process 8200)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 8200 (Ergon Agent System): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 8200 (Ergon Agent System): Available${RESET}"
fi

# Synthesis port
if is_port_used 5005; then
    process_info=$(get_port_process 5005)
    pid=$(echo "$process_info" | cut -f1)
    process=$(echo "$process_info" | cut -f2-)
    echo -e "${YELLOW}Port 5005 (Synthesis Engine): In use by PID $pid${RESET}"
    echo -e "  ${YELLOW}Process: ${process:0:80}${RESET}"
else
    echo -e "${GREEN}Port 5005 (Synthesis Engine): Available${RESET}"
fi

echo ""
echo -e "${BLUE}${BOLD}UI Services:${RESET}"
if is_running "Hephaestus/ui/server/server.py"; then
    echo -e "${GREEN}✓ Hephaestus UI is running${RESET}"
    echo -e "  Access the UI at: http://localhost:8080"
else
    echo -e "${RED}✗ Hephaestus UI is not running${RESET}"
fi

echo ""
echo -e "${BLUE}${BOLD}Database Services:${RESET}"
if is_running ".*faiss_adapter.*"; then
    echo -e "${GREEN}✓ FAISS vector database is running${RESET}"
else
    echo -e "${YELLOW}No vector database service detected${RESET}"
fi

# Check for Redis (common key-value store)
if command -v redis-cli >/dev/null 2>&1; then
    if redis-cli ping >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Redis key-value store is running${RESET}"
    else
        echo -e "${RED}✗ Redis key-value store is not running${RESET}"
    fi
fi

echo ""
echo -e "${BLUE}${BOLD}LLM Availability:${RESET}"

# Check Ollama status
if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
    echo -e "${GREEN}✓ Ollama is running${RESET}"
    
    # Try to list available models
    MODELS=$(curl -s http://localhost:11434/api/tags | grep -o '"name":"[^"]*"' | cut -d ":" -f2 | tr -d '"' | sort)
    if [ -n "$MODELS" ]; then
        echo -e "  Available models:"
        echo "$MODELS" | while read model; do
            echo -e "    - $model"
        done
    fi
else
    echo -e "${RED}✗ Ollama is not running${RESET}"
fi

# Check for Claude API
if [ -n "$ANTHROPIC_API_KEY" ] || [ -f ~/.anthropic-access-tokens ]; then
    echo -e "${GREEN}✓ Claude API is configured${RESET}"
else
    echo -e "${RED}✗ Claude API is not configured${RESET}"
fi

# Check for OpenAI API
if [ -n "$OPENAI_API_KEY" ]; then
    echo -e "${GREEN}✓ OpenAI API is configured${RESET}"
else
    echo -e "${RED}✗ OpenAI API is not configured${RESET}"
fi

echo ""
echo -e "${BLUE}${BOLD}System Resources:${RESET}"

# Show memory usage
if command -v free >/dev/null 2>&1; then
    # Linux
    MEM_TOTAL=$(free -h | awk '/^Mem:/ {print $2}')
    MEM_USED=$(free -h | awk '/^Mem:/ {print $3}')
    MEM_PERCENT=$(free | awk '/^Mem:/ {printf("%.1f%%", $3/$2 * 100)}')
    echo -e "${YELLOW}Memory Usage:${RESET}"
    echo -e "  ${MEM_USED} used / ${MEM_TOTAL} total (${MEM_PERCENT})"
elif command -v vm_stat >/dev/null 2>&1; then
    # macOS
    MEM_TOTAL=$(( $(sysctl -n hw.memsize) / 1024 / 1024 / 1024 ))
    PAGE_SIZE=$(vm_stat | grep "page size" | awk '{print $8}')
    PAGES_FREE=$(vm_stat | grep "Pages free" | awk '{print $3}' | tr -d '.')
    PAGES_ACTIVE=$(vm_stat | grep "Pages active" | awk '{print $3}' | tr -d '.')
    PAGES_INACTIVE=$(vm_stat | grep "Pages inactive" | awk '{print $3}' | tr -d '.')
    PAGES_SPECULATIVE=$(vm_stat | grep "Pages speculative" | awk '{print $3}' | tr -d '.')
    PAGES_WIRED=$(vm_stat | grep "Pages wired down" | awk '{print $4}' | tr -d '.')
    
    MEM_USED=$(( (PAGES_ACTIVE + PAGES_WIRED) * PAGE_SIZE / 1024 / 1024 / 1024 ))
    MEM_PERCENT=$(( MEM_USED * 100 / MEM_TOTAL ))
    
    echo -e "${YELLOW}Memory Usage:${RESET}"
    echo -e "  ${MEM_USED}Gi used / ${MEM_TOTAL}.0Gi total (${MEM_PERCENT}.${MEM_PERCENT}%)"
fi

# Show CPU usage
if command -v top >/dev/null 2>&1; then
    if [[ "$(uname)" == "Darwin" ]]; then
        # macOS
        CPU_USAGE=$(top -l 1 -n 0 | grep "CPU usage" | awk '{print $3, $5, $7}')
        echo -e "${YELLOW}CPU Usage:${RESET}"
        echo -e "  $CPU_USAGE"
    else
        # Linux
        CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')
        echo -e "${YELLOW}CPU Usage:${RESET}"
        echo -e "  $CPU_USAGE"
    fi
fi

# Show disk usage
if command -v df >/dev/null 2>&1; then
    if [[ "$(uname)" == "Darwin" ]]; then
        # macOS
        DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')
        DISK_USED=$(df -h / | awk 'NR==2 {print $3}')
        DISK_PERCENT=$(df -h / | awk 'NR==2 {print $5}')
    else
        # Linux
        DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')
        DISK_USED=$(df -h / | awk 'NR==2 {print $3}')
        DISK_PERCENT=$(df -h / | awk 'NR==2 {print $5}')
    fi
    
    echo -e "${YELLOW}Disk Usage:${RESET}"
    echo -e "  ${DISK_USED} used / ${DISK_TOTAL} total (${DISK_PERCENT} used)"
fi

echo ""
echo -e "${BLUE}${BOLD}=== Tekton Status Check Complete ===${RESET}"
