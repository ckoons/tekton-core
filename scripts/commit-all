#!/bin/bash
# commit-all - Script to commit changes across all Tekton subprojects
# Updated to handle branch management, merging, cleanup, and authentication

# Save original directory
ORIGINAL_DIR=$(pwd)

# Check if TEKTON_ROOT is set
if [ -z "$TEKTON_ROOT" ]; then
  echo "‚ùå Error: TEKTON_ROOT environment variable is not set"
  echo "Please set TEKTON_ROOT before running $(basename $0)"
  exit 1
fi

# Verify the directory exists
if [ ! -d "$TEKTON_ROOT" ]; then
  echo "‚ùå Error: TEKTON_ROOT points to non-existent directory: $TEKTON_ROOT"
  exit 1
fi

# Navigate to Tekton directory
cd "$TEKTON_ROOT"

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
GRAY='\033[0;90m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to check if push is needed
needs_push() {
    # Check if there are commits to push
    local ahead=$(git rev-list --count @{u}..HEAD 2>/dev/null || echo "0")
    [ "$ahead" -gt 0 ]
}

# Function to perform safe push
safe_push() {
    local branch="$1"
    local project="$2"
    
    # Check if we actually need to push
    if needs_push; then
        if [ -n "$branch" ]; then
            echo -e "${GREEN}Pushing changes to remote...${NC}"
            git push
        else
            echo -e "${YELLOW}Setting up upstream branch...${NC}"
            git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)
        fi
    else
        echo -e "${GRAY}Already up to date with remote${NC}"
    fi
}

# Pre-flight authentication check
echo -e "${BLUE}Performing pre-flight checks...${NC}"

# Check if we can access the remote without prompting
if ! git ls-remote origin HEAD >/dev/null 2>&1; then
    echo -e "${YELLOW}GitHub authentication required. Authenticating...${NC}"
    # This will prompt for credentials once and cache them
    git fetch --dry-run
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Authentication failed. Please check your credentials.${NC}"
        cd "$ORIGINAL_DIR"
        exit 1
    fi
fi
echo -e "${GREEN}‚úÖ Authentication successful${NC}"

# Check for actual changes across all repos
echo -e "${BLUE}Scanning for changes...${NC}"
HAS_CHANGES=false

# Check main repo
if [[ -n $(git status -s) ]]; then
    HAS_CHANGES=true
fi

# Check submodules
for PROJECT in "Apollo" "Athena" "Budget" "Codex" "Engram" "Ergon" "Harmonia" "Hephaestus" "Hermes" "Metis" "Prometheus" "Rhetor" "Sophia" "Synthesis" "Telos" "Terma" "tekton-core"; do
    if [ -d "$TEKTON_ROOT/$PROJECT" ]; then
        cd "$TEKTON_ROOT/$PROJECT"
        if [[ -n $(git status -s) ]]; then
            HAS_CHANGES=true
            break
        fi
    fi
done

cd "$TEKTON_ROOT"

if [ "$HAS_CHANGES" = false ]; then
    echo -e "${YELLOW}‚ÑπÔ∏è  No changes detected in any repository. Nothing to commit.${NC}"
    cd "$ORIGINAL_DIR"
    exit 0
fi

# Now proceed with normal operation
COMMIT_MSG="$1"
if [ -z "$COMMIT_MSG" ]; then
  echo -e "${RED}Usage: commit-all 'Your commit message'${NC}"
  cd "$ORIGINAL_DIR"
  exit 1
fi

# Format the complete commit message with attribution
FULL_COMMIT_MSG=$(cat <<EOF
$COMMIT_MSG

Design & Engineering Guidance:
- Changes to project structure and configuration
- Maintain consistent naming across the ecosystem

ü§ñ Generated with [Claude Code](https://claude.ai/code)
Designed & Engineering Guidance by Casey Koons <cskoons@gmail.com>
Co-Authored-By: Casey Koons <cskoons@gmail.com> & Claude <noreply@anthropic.com>
EOF
)

# List of project directories
PROJECTS=("Apollo" "Athena" "Budget" "Codex" "Engram" "Ergon" "Harmonia" "Hephaestus" "Hermes" "Metis" "Prometheus" "Rhetor" "Sophia" "Synthesis" "Telos" "Terma" "tekton-core")

# Track which projects were changed
CHANGED=false
PROJECTS_WITH_CHANGES=()

# Get current branch
cd "$TEKTON_ROOT"
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${BLUE}${BOLD}Current branch: ${CURRENT_BRANCH}${NC}"
echo ""

# First pass: identify all projects with changes
echo -e "${BLUE}Identifying changed projects...${NC}"
for PROJECT in "${PROJECTS[@]}"; do
  if [ -d "$TEKTON_ROOT/$PROJECT" ]; then
    cd "$TEKTON_ROOT/$PROJECT"
    if [[ -n $(git status -s) ]]; then
      PROJECTS_WITH_CHANGES+=("$PROJECT")
      echo -e "  ${GREEN}‚úì${NC} $PROJECT has changes"
    fi
  fi
done

# Check Tekton main repo
cd "$TEKTON_ROOT"
GIT_STATUS=$(git status -s)
if [[ -n "$GIT_STATUS" ]]; then
  NON_SCRIPT_CHANGES=$(echo "$GIT_STATUS" | grep -v "commit-all" | wc -l | tr -d '[:space:]')
  if [[ "$NON_SCRIPT_CHANGES" -gt 0 ]] || [[ "$GIT_STATUS" == *"renamed:"*"master"*"main"* ]]; then
    PROJECTS_WITH_CHANGES+=("Tekton")
    echo -e "  ${GREEN}‚úì${NC} Tekton has changes"
  fi
fi

echo ""

# Commit and push changes in each project with changes
for PROJECT in "${PROJECTS_WITH_CHANGES[@]}"; do
  if [ "$PROJECT" == "Tekton" ]; then
    cd "$TEKTON_ROOT"
    echo -e "${BLUE}Committing changes in ${BOLD}Tekton${NC}..."
    git add .
    git commit -m "$FULL_COMMIT_MSG"
    
    # Check if branch has upstream
    if git rev-parse --abbrev-ref --symbolic-full-name @{u} &>/dev/null; then
      safe_push "has-upstream" "Tekton"
    else
      safe_push "" "Tekton"
    fi
    CHANGED=true
  else
    cd "$TEKTON_ROOT/$PROJECT"
    echo -e "${BLUE}Committing changes in ${BOLD}$PROJECT${NC}..."
    git add .
    git commit -m "$FULL_COMMIT_MSG"
    
    # Check if branch has upstream
    if git rev-parse --abbrev-ref --symbolic-full-name @{u} &>/dev/null; then
      safe_push "has-upstream" "$PROJECT"
    else
      safe_push "" "$PROJECT"
    fi
    CHANGED=true
  fi
done

echo ""
if [ "$CHANGED" = true ]; then
  echo -e "${GREEN}${BOLD}‚úÖ Changes committed and pushed to ${#PROJECTS_WITH_CHANGES[@]} repositories${NC}"
else
  echo -e "${YELLOW}‚ÑπÔ∏è No changes found in any project${NC}"
fi

# Branch management section - only if we're on a non-main branch and changes were pushed
if [ "$CURRENT_BRANCH" != "main" ] && [ "$CHANGED" = true ]; then
  echo ""
  echo -e "${BLUE}${BOLD}You are currently on branch: ${CURRENT_BRANCH}${NC}"
  
  # Ask if user wants to merge to main
  read -p "$(echo -e "${YELLOW}Would you like to merge ${CURRENT_BRANCH} into main? [y/n]: ${NC}")" MERGE_RESPONSE
  
  if [[ "$MERGE_RESPONSE" =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}Merging $CURRENT_BRANCH into main for all repositories...${NC}"
    
    # Pre-authenticate for merge operations
    echo -e "${BLUE}Authenticating for merge operations...${NC}"
    cd "$TEKTON_ROOT"
    git fetch origin main --dry-run >/dev/null 2>&1
    
    # Keep track of merge errors
    MERGE_ERROR=false
    
    # Merge changes in each project
    for PROJECT in "${PROJECTS[@]}"; do
      if [ -d "$TEKTON_ROOT/$PROJECT" ]; then
        cd "$TEKTON_ROOT/$PROJECT"
        
        # Check if the project has both branches
        if git rev-parse --verify $CURRENT_BRANCH >/dev/null 2>&1 && git rev-parse --verify main >/dev/null 2>&1; then
          echo -e "${BLUE}Merging $CURRENT_BRANCH into main for ${BOLD}$PROJECT${NC}..."
          
          # Switch to main
          git checkout main
          
          # Pull latest changes
          git pull origin main
          
          # Merge feature branch
          if git merge --no-ff $CURRENT_BRANCH -m "Merge branch '$CURRENT_BRANCH'"; then
            # Only push if there are new commits
            if needs_push; then
              git push origin main
              echo -e "${GREEN}Successfully merged and pushed $CURRENT_BRANCH into main for $PROJECT${NC}"
            else
              echo -e "${GREEN}Successfully merged $CURRENT_BRANCH into main for $PROJECT (already up to date)${NC}"
            fi
          else
            echo -e "${RED}Error: Merge conflict in $PROJECT. Please resolve manually.${NC}"
            MERGE_ERROR=true
            # Switch back to the original branch
            git merge --abort >/dev/null 2>&1
            git checkout $CURRENT_BRANCH
          fi
        else
          echo -e "${YELLOW}Skipping $PROJECT: Either $CURRENT_BRANCH or main branch does not exist${NC}"
        fi
      fi
    done
    
    # Now handle Tekton main repository
    cd "$TEKTON_ROOT"
    
    # Check if both branches exist
    if git rev-parse --verify $CURRENT_BRANCH >/dev/null 2>&1 && git rev-parse --verify main >/dev/null 2>&1; then
      echo -e "${BLUE}Merging $CURRENT_BRANCH into main for ${BOLD}Tekton${NC}..."
      
      # Switch to main
      git checkout main
      
      # Pull latest changes
      git pull origin main
      
      # Merge feature branch
      if git merge --no-ff $CURRENT_BRANCH -m "Merge branch '$CURRENT_BRANCH'"; then
        # Only push if there are new commits
        if needs_push; then
          git push origin main
          echo -e "${GREEN}Successfully merged and pushed $CURRENT_BRANCH into main for Tekton${NC}"
        else
          echo -e "${GREEN}Successfully merged $CURRENT_BRANCH into main for Tekton (already up to date)${NC}"
        fi
      else
        echo -e "${RED}Error: Merge conflict in Tekton. Please resolve manually.${NC}"
        MERGE_ERROR=true
        # Switch back to the original branch
        git merge --abort >/dev/null 2>&1
        git checkout $CURRENT_BRANCH
      fi
    else
      echo -e "${YELLOW}Skipping Tekton: Either $CURRENT_BRANCH or main branch does not exist${NC}"
    fi
    
    # Check if any merge errors occurred
    if [ "$MERGE_ERROR" = true ]; then
      echo -e "${RED}${BOLD}‚ö†Ô∏è Merge errors occurred in some repositories. Please resolve manually.${NC}"
    else
      echo -e "${GREEN}${BOLD}‚úÖ All merges completed successfully${NC}"
      
      # Ask if user wants to delete the feature branch
      read -p "$(echo -e "${YELLOW}Do you want to delete the ${CURRENT_BRANCH} branch locally and remotely? [y/n]: ${NC}")" DELETE_RESPONSE
      
      if [[ "$DELETE_RESPONSE" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Deleting branch $CURRENT_BRANCH from all repositories...${NC}"
        
        # Delete branch in each project
        for PROJECT in "${PROJECTS[@]}"; do
          if [ -d "$TEKTON_ROOT/$PROJECT" ]; then
            cd "$TEKTON_ROOT/$PROJECT"
            
            # Check if project has the branch
            if git rev-parse --verify $CURRENT_BRANCH >/dev/null 2>&1; then
              # Make sure we're on main
              git checkout main >/dev/null 2>&1
              
              # Delete local branch
              git branch -D $CURRENT_BRANCH
              
              # Delete remote branch if it exists
              if git ls-remote --exit-code --heads origin $CURRENT_BRANCH >/dev/null 2>&1; then
                git push origin --delete $CURRENT_BRANCH
                echo -e "${GREEN}Deleted branch $CURRENT_BRANCH from $PROJECT${NC}"
              else
                echo -e "${GRAY}Remote branch $CURRENT_BRANCH already deleted in $PROJECT${NC}"
              fi
            fi
          fi
        done
        
        # Delete branch in Tekton repository
        cd "$TEKTON_ROOT"
        # Make sure we're on main
        git checkout main >/dev/null 2>&1
        
        # Delete local branch
        git branch -D $CURRENT_BRANCH
        
        # Delete remote branch if it exists
        if git ls-remote --exit-code --heads origin $CURRENT_BRANCH >/dev/null 2>&1; then
          git push origin --delete $CURRENT_BRANCH
          echo -e "${GREEN}Deleted branch $CURRENT_BRANCH from Tekton${NC}"
        else
          echo -e "${GRAY}Remote branch $CURRENT_BRANCH already deleted in Tekton${NC}"
        fi
        
        echo -e "${GREEN}${BOLD}‚úÖ Branch $CURRENT_BRANCH has been deleted from all repositories${NC}"
      fi
    fi
  else
    echo -e "${YELLOW}Skipping merge to main${NC}"
  fi
fi

# Return to original directory
cd "$ORIGINAL_DIR"