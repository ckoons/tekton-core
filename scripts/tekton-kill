#!/bin/bash
# tekton-kill - Master script to stop all Tekton components and AI services
# Created: April 11, 2025
# Updated: April 19, 2025 - Enhanced Hermes database process detection and termination

# ============================
# Port Assignments by Component
# ============================
# Hephaestus UI:       8080 (HTTP server), 8081 (WebSocket server)
# Engram:              8000 (Memory server)
# Hermes:              8100 (Service registry), 8101 (Database)
# Ergon:               8200 (Agent system)
# LLM Adapter:         8300 (HTTP server), 8301 (WebSocket server)
# Terma:               8765 (API server), 8767 (WebSocket server)
# Other components may use additional ports as needed

# Export standardized ports as environment variables for all components
export HEPHAESTUS_HTTP_PORT=8080
export HEPHAESTUS_WS_PORT=8081
export ENGRAM_PORT=8000
export HERMES_REGISTRY_PORT=8100
export HERMES_DB_PORT=8101
export ERGON_PORT=8200
export TERMA_API_PORT=8765
export TERMA_WS_PORT=8767

# ANSI color codes for terminal output
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
BOLD="\033[1m"
RESET="\033[0m"

# Find Tekton root directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [[ "$SCRIPT_DIR" == *"/utils" ]]; then
    # Script is running from a symlink in utils
    TEKTON_DIR=$(cd "$SCRIPT_DIR" && cd "$(readlink "${BASH_SOURCE[0]}" | xargs dirname | xargs dirname)" && pwd)
else
    # Script is running from Tekton/scripts
    TEKTON_DIR="$( cd "$SCRIPT_DIR/.." && pwd )"
fi

# Ensure we're in the correct directory context
cd "$TEKTON_DIR"

# Function to check if a process is running
is_running() {
    pgrep -f "$1" >/dev/null
    return $?
}

# Function to check if a port is in use
is_port_used() {
    lsof -ti :"$1" >/dev/null 2>&1
    return $?
}

# Function to release a port if it's in use
release_port() {
    local port="$1"
    local description="$2"
    local force="$3"  # Set to true to use SIGKILL immediately
    
    if is_port_used "$port"; then
        echo -e "${YELLOW}Releasing $description port $port...${RESET}"
        local PIDS=$(lsof -ti :"$port" 2>/dev/null)
        
        if [ -n "$PIDS" ]; then
            echo -e "${YELLOW}Killing processes using port $port: $PIDS${RESET}"
            
            if [ "$force" = "true" ]; then
                # Force kill immediately
                kill -9 $PIDS 2>/dev/null || true
            else
                # Try graceful shutdown first
                kill $PIDS 2>/dev/null || true
                sleep 1
                
                # Check if still in use
                if is_port_used "$port"; then
                    echo -e "${RED}Port $port still in use, using SIGKILL${RESET}"
                    kill -9 $(lsof -ti :"$port" 2>/dev/null) 2>/dev/null || true
                fi
            fi
            
            sleep 1
            if is_port_used "$port"; then
                echo -e "${RED}Warning: Port $port is still in use${RESET}"
                return 1
            else
                echo -e "${GREEN}✓ Port $port successfully released${RESET}"
                return 0
            fi
        fi
    else
        echo -e "${GREEN}Port $port is already free${RESET}"
        return 0
    fi
}

# Function to kill all processes matching a pattern
kill_processes() {
    local pattern="$1"
    local description="$2"
    
    if is_running "$pattern"; then
        echo -e "${YELLOW}Shutting down $description...${RESET}"
        pkill -f "$pattern"
        sleep 1
        
        # Check if it was killed
        if ! is_running "$pattern"; then
            echo -e "${GREEN}✓ Successfully shut down $description${RESET}"
            return 0
        else
            echo -e "${RED}✗ Failed to shut down $description gracefully, using SIGKILL${RESET}"
            pkill -9 -f "$pattern"
            if ! is_running "$pattern"; then
                echo -e "${GREEN}✓ Successfully force-killed $description${RESET}"
                return 0
            else
                echo -e "${RED}✗ Failed to kill $description${RESET}"
                return 1
            fi
        fi
    else
        echo -e "${GREEN}$description not running${RESET}"
        return 0
    fi
}

# Function to ensure all Tekton ports are available
# This can be called from the launch script
ensure_ports_available() {
    local result=0
    
    # Release Hephaestus ports
    release_port "8080" "Hephaestus HTTP" || result=1
    release_port "8081" "Hephaestus WebSocket" || result=1
    
    # Release Engram ports
    release_port "8000" "Engram Memory" || result=1
    
    # Release Hermes ports
    release_port "8100" "Hermes Service Registry" || result=1
    release_port "8101" "Hermes Database" || result=1
    
    # Release Ergon ports
    release_port "8200" "Ergon Agent System" || result=1
    
    # Release LLM Adapter ports
    release_port "8300" "LLM Adapter HTTP" || result=1
    release_port "8301" "LLM Adapter WebSocket" || result=1
    
    # Release Synthesis ports
    release_port "5005" "Synthesis Engine" || result=1
    
    # Release Terma ports - use environment variables
    release_port "$TERMA_API_PORT" "Terma API" || result=1
    release_port "$TERMA_WS_PORT" "Terma WebSocket" || result=1
    
    # Check results
    if [ $result -eq 0 ]; then
        echo -e "${GREEN}All Tekton ports are available${RESET}"
    else
        echo -e "${RED}Some ports could not be released. Check for running processes.${RESET}"
    fi
    
    return $result
}

# Function to use Hermes to gracefully shut down components
shutdown_via_hermes() {
    echo -e "${BLUE}${BOLD}Attempting to use Hermes for graceful component shutdown...${RESET}"
    
    # Check if Hermes API is running and responding
    if curl -s "http://localhost:8100/api/health" > /dev/null 2>&1; then
        echo -e "${GREEN}Hermes API is responding - using it for graceful shutdown${RESET}"
        
        # Call Hermes API to initiate component shutdown
        SHUTDOWN_RESULT=$(curl -s -X POST "http://localhost:8100/api/shutdown" -H "Content-Type: application/json" -d '{"graceful": true}')
        
        if [[ "$SHUTDOWN_RESULT" == *"success"* ]]; then
            echo -e "${GREEN}Successfully requested component shutdown via Hermes${RESET}"
            echo -e "${YELLOW}Waiting 5 seconds for components to shut down gracefully...${RESET}"
            sleep 5
            return 0
        else
            echo -e "${YELLOW}Failed to request component shutdown via Hermes: $SHUTDOWN_RESULT${RESET}"
            echo -e "${YELLOW}Falling back to direct process termination${RESET}"
            return 1
        fi
    else
        echo -e "${YELLOW}Hermes API is not responding - falling back to direct process termination${RESET}"
        return 1
    fi
}

# Main kill process
# Only execute this part if script is run directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Display information
    echo -e "${BLUE}${BOLD}====== Tekton Shutdown ======${RESET}"
    echo -e "${BLUE}Tekton installation: ${YELLOW}$TEKTON_DIR${RESET}"
    echo ""
    
    # First attempt to use Hermes for graceful shutdown if running
    HERMES_SHUTDOWN_USED=false
    if is_running "hermes/api/app.py" || is_running "hermes.*database_manager"; then
        # Attempt graceful shutdown via Hermes
        shutdown_via_hermes
        if [ $? -eq 0 ]; then
            HERMES_SHUTDOWN_USED=true
        fi
    fi
    
    # Kill Claude AI processes
    kill_processes "claude" "Claude AI"
    
    # Kill Ollama processes that might have been launched by Tekton
    kill_processes "ollama_bridge.py" "Ollama bridge"
    
    # If Hermes didn't handle shutdown, kill components directly in reverse dependency order
    if [ "$HERMES_SHUTDOWN_USED" = false ]; then
        echo -e "${BLUE}${BOLD}Direct process termination...${RESET}"
        # Kill Tekton components in reverse dependency order
        kill_processes "sophia.core" "Sophia (ML Engine)"
        kill_processes "athena.core" "Athena (Knowledge Graph)"
        kill_processes "prometheus.core" "Prometheus (Planning)"
        kill_processes "harmonia.core" "Harmonia (Workflow)"
        kill_processes "telos.core" "Telos (User Interface)"
        kill_processes "rhetor.core" "Rhetor (Context Manager)"
        
        # Standard process check for Terma
        kill_processes "terma.api.app" "Terma Terminal System"
        kill_processes "terma.api.ui_server" "Terma UI Server"
        kill_processes "llm_adapter" "LLM Adapter"
        kill_processes "ergon.core" "Ergon (Agent System)"
        kill_processes "engram_with_ollama" "Engram+Ollama"
        kill_processes "engram_with_claude" "Engram+Claude"
        kill_processes "engram.api.consolidated_server" "Engram Memory Server"
    fi
    
    # Always kill Hermes last (even if it handled other component shutdowns)
    if is_running "hermes/api/app.py" || is_running "hermes.*database.manager" || is_running "hermes.*database_manager" || is_running "hermes.*database_mcp_server" || is_running "hermes.*service_discovery"; then
        echo -e "${BLUE}${BOLD}Shutting down Hermes services...${RESET}"
        kill_processes "hermes/api/app.py" "Hermes API Server"
        kill_processes "hermes.*database.manager" "Hermes Database Manager" 
        kill_processes "hermes.*database_manager" "Hermes Database Manager" 
        kill_processes "hermes.*database_mcp_server" "Hermes Database MCP Server"
        kill_processes "hermes/core/database" "Hermes Database Core"
        kill_processes "hermes.*service_discovery" "Hermes Service Registry"
    fi
    
    # Kill Hephaestus UI by process name
    kill_processes "Hephaestus/ui/server/server.py" "Hephaestus UI"
    
    # Release all ports used by Tekton components
    ensure_ports_available
    
    # Kill any Python processes related to Tekton
    echo -e "${YELLOW}Checking for any remaining Tekton Python processes...${RESET}"
    if pgrep -f "$TEKTON_DIR.*python" >/dev/null; then
        echo -e "${YELLOW}Killing remaining Python processes in Tekton directory...${RESET}"
        pkill -f "$TEKTON_DIR.*python"
        sleep 1
        if pgrep -f "$TEKTON_DIR.*python" >/dev/null; then
            echo -e "${RED}Some Python processes could not be killed. You may want to check them manually:${RESET}"
            ps aux | grep "$TEKTON_DIR.*python" | grep -v grep
        else
            echo -e "${GREEN}✓ All remaining Python processes killed${RESET}"
        fi
    else
        echo -e "${GREEN}No remaining Tekton Python processes found${RESET}"
    fi
    
    # Force kill any remaining Hermes processes (more aggressive pattern matching)
    HERMES_PATTERNS=("hermes" "database.manager" "database_manager" "database_mcp_server" "service_discovery")
    
    for pattern in "${HERMES_PATTERNS[@]}"; do
        if pgrep -f "$pattern" >/dev/null; then
            echo -e "${YELLOW}Force killing remaining processes matching: $pattern...${RESET}"
            pkill -9 -f "$pattern"
            sleep 1
        fi
    done
    
    # Final Hermes check
    if pgrep -f "hermes" >/dev/null; then
        echo -e "${RED}Some Hermes processes could not be killed. You may want to check them manually:${RESET}"
        ps aux | grep "hermes" | grep -v grep
    else
        echo -e "${GREEN}✓ All Hermes processes successfully terminated${RESET}"
    fi
    
    # Final sweep for any remaining Tekton component processes
    for component in engram hermes ergon rhetor telos athena prometheus sophia harmonia synthesis hephaestus llm_adapter; do
        if pgrep -f "$component" >/dev/null; then
            echo -e "${YELLOW}Killing remaining $component processes...${RESET}"
            pkill -9 -f "$component"
        fi
    done
    
    # Kill any Node.js processes related to Hephaestus UI if running
    if pgrep -f "node.*$TEKTON_DIR/Hephaestus" >/dev/null; then
        echo -e "${YELLOW}Killing Hephaestus UI Node.js processes...${RESET}"
        pkill -f "node.*$TEKTON_DIR/Hephaestus"
        sleep 1
        if ! pgrep -f "node.*$TEKTON_DIR/Hephaestus" >/dev/null; then
            echo -e "${GREEN}✓ Successfully killed Hephaestus UI Node.js processes${RESET}"
        else
            echo -e "${RED}Failed to kill some Hephaestus UI Node.js processes${RESET}"
        fi
    fi
    
    echo ""
    echo -e "${GREEN}${BOLD}Tekton shutdown complete.${RESET}"
fi