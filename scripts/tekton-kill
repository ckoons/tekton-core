#!/usr/bin/env bash
# tekton-kill - Master script to stop all Tekton components and AI services
# Created: April 11, 2025
# Updated: May 3, 2025 - Added Claude process protection to avoid terminating Claude Code sessions

# Debug mode (set to false for production use)
DEBUG_PATH=false

# Pattern to exclude Claude-related processes from being killed
EXCLUDE_PATTERN="claude|anthropic"

# Use TEKTON_ROOT if it's set, otherwise find Tekton root directory
if [[ -n "${TEKTON_ROOT}" ]]; then
    TEKTON_DIR="${TEKTON_ROOT}"
    SCRIPT_DIR="${TEKTON_DIR}/scripts"
    
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Using TEKTON_ROOT: $TEKTON_ROOT" >&2
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Set SCRIPT_DIR to: $SCRIPT_DIR" >&2
else
    # Determine the script location, handling symlinks
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: BASH_SOURCE[0] = ${BASH_SOURCE[0]}" >&2
    
    if [[ -L "${BASH_SOURCE[0]}" ]]; then
        # This is a symlink, resolve it
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: File is a symlink" >&2
        
        SOURCE_LINK=$(readlink "${BASH_SOURCE[0]}")
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Symlink points to: $SOURCE_LINK" >&2
        
        if [[ "$SOURCE_LINK" == /* ]]; then
            # Absolute path
            REAL_SCRIPT="$SOURCE_LINK"
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Using absolute path: $REAL_SCRIPT" >&2
        else
            # Relative path
            SCRIPT_PARENT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
            REAL_SCRIPT="$SCRIPT_PARENT/$SOURCE_LINK"
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Using relative path:" >&2
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: SCRIPT_PARENT = $SCRIPT_PARENT" >&2
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: REAL_SCRIPT = $REAL_SCRIPT" >&2
        fi
        
        SCRIPT_DIR="$( cd "$( dirname "$REAL_SCRIPT" )" && pwd )"
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: SCRIPT_DIR set to: $SCRIPT_DIR" >&2
    else
        # Not a symlink, use the standard path
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: File is not a symlink" >&2
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: SCRIPT_DIR set to: $SCRIPT_DIR" >&2
    fi
    
    # Check if we're in a utils directory
    if [[ "$SCRIPT_DIR" == *"/utils" ]]; then
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Script running from a utils directory" >&2
        
        # Extract the Tekton scripts directory from the resolved symlink path
        if [[ "$REAL_SCRIPT" == */scripts/* ]]; then
            # Get the part before /scripts/
            TEKTON_DIR=$(echo "$REAL_SCRIPT" | sed 's/\/scripts\/.*$//')
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: TEKTON_DIR set to: $TEKTON_DIR (from /scripts/ in path)" >&2
        else
            # Fallback - try using the symlink directly to figure out the path
            [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Path doesn't contain /scripts/" >&2
            
            # Get the Tekton root by looking for a scripts dir in the path
            if [[ "$SOURCE_LINK" == */Tekton/scripts/* ]]; then
                TEKTON_DIR=$(echo "$SOURCE_LINK" | sed 's/\/scripts\/.*$//')
                [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: TEKTON_DIR set to: $TEKTON_DIR (from SOURCE_LINK)" >&2
            else
                [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Cannot determine Tekton root directory from symlink" >&2
                echo "ERROR: Cannot determine Tekton root directory from symlink" >&2
                exit 1
            fi
        fi
    else
        # Standard case - script is in the Tekton/scripts directory
        TEKTON_DIR="$( cd "$SCRIPT_DIR/.." && pwd )"
        [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Standard case - TEKTON_DIR is parent of SCRIPT_DIR: $TEKTON_DIR" >&2
    fi
    
    # Set TEKTON_ROOT for consistency
    export TEKTON_ROOT="${TEKTON_DIR}"
    [[ "$DEBUG_PATH" == "true" ]] && echo "DEBUG: Set TEKTON_ROOT to: $TEKTON_ROOT" >&2
fi

# Load shared libraries
LIB_DIR="${SCRIPT_DIR}/lib"
source "${LIB_DIR}/tekton-utils.sh"
source "${LIB_DIR}/tekton-ports.sh"
source "${LIB_DIR}/tekton-process.sh"
source "${LIB_DIR}/tekton-config.sh"

#######################################
# Kill processes matching a pattern while excluding Claude processes
# Arguments:
#   $1: Pattern to match against process command line
#   $2: Description of the process (for display purposes)
#   $3: Force kill immediately (optional, defaults to false)
# Returns:
#   0 if processes killed successfully, 1 otherwise
#######################################
tekton_kill_processes_safe() {
  local pattern="$1"
  local description="$2"
  local force="${3:-false}"
  
  # Get PIDs matching pattern but excluding Claude processes
  local safe_pids
  safe_pids=$(pgrep -f "$pattern" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
  
  if [ -n "$safe_pids" ]; then
    tekton_info "Shutting down $description... (excluding Claude processes)"
    
    if [[ "$force" == "true" ]]; then
      # Kill only the filtered PIDs
      for pid in $safe_pids; do
        kill -9 "$pid" 2>/dev/null
      done
    else
      # Try graceful shutdown first
      for pid in $safe_pids; do
        kill "$pid" 2>/dev/null
      done
      sleep 1
      
      # Check if still running and force kill if needed
      safe_pids=$(pgrep -f "$pattern" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
      if [ -n "$safe_pids" ]; then
        tekton_warn "Failed to shut down $description gracefully, using SIGKILL"
        for pid in $safe_pids; do
          kill -9 "$pid" 2>/dev/null
        done
      fi
    fi
    
    # Verify processes are gone (excluding Claude processes)
    sleep 1
    safe_pids=$(pgrep -f "$pattern" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
    if [ -z "$safe_pids" ]; then
      tekton_success "Successfully shut down $description"
      return 0
    else
      tekton_warn "Failed to kill some $description processes"
      return 1
    fi
  else
    tekton_debug "$description not running"
    return 0
  fi
}

# Ensure we're in the correct directory context
cd "$TEKTON_DIR"

# Main kill process
# Only execute this part if script is run directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Display information
    tekton_info "====== Tekton Shutdown ======"
    tekton_info "Tekton installation: ${TEKTON_COLOR_YELLOW}$TEKTON_DIR${TEKTON_COLOR_RESET}"
    echo ""
    
    # First attempt to use Hermes for graceful shutdown if running
    HERMES_SHUTDOWN_USED=false
    if tekton_is_running "hermes/api/app.py" || tekton_is_running "hermes.*database_manager"; then
        # Attempt graceful shutdown via Hermes
        if tekton_shutdown_via_hermes; then
            HERMES_SHUTDOWN_USED=true
        fi
    fi
    
    # Kill Ollama processes that might have been launched by Tekton (using safe function)
    tekton_kill_processes_safe "ollama_bridge.py" "Ollama bridge"
    
    # If Hermes didn't handle shutdown, kill components directly in reverse dependency order
    if [ "$HERMES_SHUTDOWN_USED" = false ]; then
        tekton_info "Direct process termination... (excluding Claude processes)"
        
        # Kill Tekton components in reverse dependency order
        tekton_kill_processes_safe "sophia.core" "Sophia (ML Engine)"
        tekton_kill_processes_safe "athena.core" "Athena (Knowledge Graph)"
        tekton_kill_processes_safe "prometheus.core" "Prometheus (Planning)"
        tekton_kill_processes_safe "harmonia.core" "Harmonia (Workflow)"
        tekton_kill_processes_safe "telos.core" "Telos (User Interface)"
        
        # Kill Rhetor processes with comprehensive pattern matching
        tekton_kill_processes_safe "rhetor.api.app" "Rhetor LLM Manager"
        tekton_kill_processes_safe "rhetor.core" "Rhetor Communication Engine"
        
        # Standard process check for Terma
        tekton_kill_processes_safe "terma.api.app" "Terma Terminal System"
        tekton_kill_processes_safe "terma.api.ui_server" "Terma UI Server"
        tekton_kill_processes_safe "llm_adapter" "LLM Adapter"
        tekton_kill_processes_safe "ergon.core" "Ergon (Agent System)"
        tekton_kill_processes_safe "engram_with_ollama" "Engram+Ollama"
        tekton_kill_processes_safe "engram_with_claude" "Engram+Claude"
        tekton_kill_processes_safe "engram.api.consolidated_server" "Engram Memory Server"
    fi
    
    # Always kill Hermes last (even if it handled other component shutdowns)
    if tekton_is_running "hermes/api/app.py" || tekton_is_running "hermes.*database.manager" || tekton_is_running "hermes.*database_manager" || tekton_is_running "hermes.*database_mcp_server" || tekton_is_running "hermes.*service_discovery"; then
        tekton_info "Shutting down Hermes services... (excluding Claude processes)"
        tekton_kill_processes_safe "hermes/api/app.py" "Hermes API Server"
        tekton_kill_processes_safe "hermes.*database.manager" "Hermes Database Manager" 
        tekton_kill_processes_safe "hermes.*database_manager" "Hermes Database Manager" 
        tekton_kill_processes_safe "hermes.*database_mcp_server" "Hermes Database MCP Server"
        tekton_kill_processes_safe "hermes/core/database" "Hermes Database Core"
        tekton_kill_processes_safe "hermes.*service_discovery" "Hermes Service Registry"
    fi
    
    # Kill Hephaestus UI by process name
    tekton_kill_processes_safe "Hephaestus/ui/server/server.py" "Hephaestus UI"
    
    # Release all ports used by Tekton components
    tekton_ensure_ports_available
    
    # Kill any Python processes related to Tekton
    tekton_info "Checking for any remaining Tekton Python processes... (excluding Claude processes)"
    # Get Python processes in Tekton directory excluding Claude processes
    tekton_python_pids=$(pgrep -f "$TEKTON_DIR.*python" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
    
    if [ -n "$tekton_python_pids" ]; then
        tekton_warn "Killing remaining Python processes in Tekton directory..."
        for pid in $tekton_python_pids; do
            kill "$pid" 2>/dev/null
        done
        sleep 1
        
        # Check again
        tekton_python_pids=$(pgrep -f "$TEKTON_DIR.*python" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
        if [ -n "$tekton_python_pids" ]; then
            tekton_warn "Some Python processes could not be killed gracefully, using force..."
            for pid in $tekton_python_pids; do
                kill -9 "$pid" 2>/dev/null
            done
            sleep 1
            
            # Final check
            tekton_python_pids=$(pgrep -f "$TEKTON_DIR.*python" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
            if [ -n "$tekton_python_pids" ]; then
                tekton_warn "Some Python processes could not be killed. You may want to check them manually:"
                ps aux | grep "$TEKTON_DIR.*python" | grep -v -E "$EXCLUDE_PATTERN" | grep -v grep
            else
                tekton_success "All remaining non-Claude Python processes killed"
            fi
        else
            tekton_success "All remaining non-Claude Python processes killed"
        fi
    else
        tekton_success "No remaining Tekton Python processes found (excluding Claude processes)"
    fi
    
    # Force kill any remaining Hermes processes (more aggressive pattern matching but still excluding Claude)
    HERMES_PATTERNS=("hermes" "database.manager" "database_manager" "database_mcp_server" "service_discovery")
    
    for pattern in "${HERMES_PATTERNS[@]}"; do
        hermes_pids=$(pgrep -f "$pattern" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
        if [ -n "$hermes_pids" ]; then
            tekton_warn "Force killing remaining processes matching: $pattern (excluding Claude processes)..."
            for pid in $hermes_pids; do
                kill -9 "$pid" 2>/dev/null
            done
            sleep 1
        fi
    done
    
    # Final Hermes check
    hermes_pids=$(pgrep -f "hermes" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
    if [ -n "$hermes_pids" ]; then
        tekton_warn "Some Hermes processes could not be killed. You may want to check them manually:"
        ps aux | grep "hermes" | grep -v -E "$EXCLUDE_PATTERN" | grep -v grep
    else
        tekton_success "All Hermes processes successfully terminated (excluding Claude processes)"
    fi
    
    # Final sweep for any remaining Tekton component processes
    for component in engram hermes ergon rhetor telos athena prometheus sophia harmonia synthesis hephaestus llm_adapter; do
        component_pids=$(pgrep -f "$component" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
        if [ -n "$component_pids" ]; then
            tekton_warn "Killing remaining $component processes (excluding Claude processes)..."
            for pid in $component_pids; do
                kill -9 "$pid" 2>/dev/null
            done
        fi
    done
    
    # Kill any Node.js processes related to Hephaestus UI if running (excluding Claude processes)
    nodejs_pids=$(pgrep -f "node.*$TEKTON_DIR/Hephaestus" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
    if [ -n "$nodejs_pids" ]; then
        tekton_warn "Killing Hephaestus UI Node.js processes (excluding Claude processes)..."
        for pid in $nodejs_pids; do
            kill "$pid" 2>/dev/null
        done
        sleep 1
        
        # Check again
        nodejs_pids=$(pgrep -f "node.*$TEKTON_DIR/Hephaestus" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
        if [ -z "$nodejs_pids" ]; then
            tekton_success "Successfully killed Hephaestus UI Node.js processes"
        else
            tekton_warn "Failed to kill some Hephaestus UI Node.js processes, using force..."
            for pid in $nodejs_pids; do
                kill -9 "$pid" 2>/dev/null
            done
            
            # Final check
            nodejs_pids=$(pgrep -f "node.*$TEKTON_DIR/Hephaestus" | grep -v -E "$EXCLUDE_PATTERN" 2>/dev/null || echo "")
            if [ -z "$nodejs_pids" ]; then
                tekton_success "Successfully killed Hephaestus UI Node.js processes"
            else
                tekton_warn "Failed to kill some Hephaestus UI Node.js processes"
            fi
        fi
    fi
    
    echo ""
    tekton_success "Tekton shutdown complete."
fi