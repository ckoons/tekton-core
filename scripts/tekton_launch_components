#!/bin/bash
# tekton_launch_components
# A component-specific launcher for the Tekton ecosystem
# Created: April 1, 2025

# Default values
COMPONENTS=()
REGISTER_WITH_HERMES=false
HERMES_URL="http://localhost:5000/api"
VERBOSE=false
ALL_COMPONENTS=false

# ANSI color codes for terminal output
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
BOLD="\033[1m"
RESET="\033[0m"

# Find Tekton root directory and set up paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TEKTON_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Function to display usage
show_usage() {
    echo "Tekton Component Launcher - Start specific Tekton components"
    echo ""
    echo "Usage: tekton_launch_components [OPTIONS] [COMPONENTS...]"
    echo ""
    echo "Options:"
    echo "  --register-hermes       Register components with Hermes"
    echo "  --hermes-url URL        URL of the Hermes API (default: http://localhost:5000/api)"
    echo "  --verbose               Display verbose output"
    echo "  --all                   Launch all available components"
    echo "  --help                  Show this help message"
    echo ""
    echo "Components:"
    echo "  synthesis               Launch Synthesis Execution Engine"
    echo "  harmonia                Launch Harmonia Workflow Engine"
    echo "  athena                  Launch Athena Knowledge Graph"
    echo "  sophia                  Launch Sophia Machine Learning Engine"
    echo "  prometheus              Launch Prometheus Planning Engine"
    echo "  rhetor                  Launch Rhetor Communication System"
    echo "  telos                   Launch Telos User Interface"
    echo ""
    echo "Examples:"
    echo "  Launch Synthesis:                 tekton_launch_components synthesis"
    echo "  Launch multiple components:       tekton_launch_components synthesis harmonia"
    echo "  Register with Hermes:             tekton_launch_components --register-hermes synthesis"
    echo "  Launch all components:            tekton_launch_components --all"
}

# Function to check if a process is running
is_running() {
    pgrep -f "$1" >/dev/null
    return $?
}

# Function to log messages
log() {
    local level="$1"
    local message="$2"
    
    case "$level" in
        "INFO")
            echo -e "${GREEN}[INFO]${RESET} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN]${RESET} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${RESET} $message"
            ;;
        *)
            echo -e "$message"
            ;;
    esac
}

verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[DEBUG]${RESET} $1"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --register-hermes)
            REGISTER_WITH_HERMES=true
            shift
            ;;
        --hermes-url)
            HERMES_URL="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --all)
            ALL_COMPONENTS=true
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            echo "Try 'tekton_launch_components --help' for more information."
            exit 1
            ;;
        *)
            COMPONENTS+=("$1")
            shift
            ;;
    esac
done

# Create necessary directories
mkdir -p "$HOME/.tekton/logs"

# Banner
echo -e "${BLUE}${BOLD}====== Tekton Component Launcher ======${RESET}"
echo -e "${GREEN}Using Tekton installation at: $TEKTON_DIR${RESET}"
echo ""

# If --all is specified, detect all available components
if [ "$ALL_COMPONENTS" = true ]; then
    log "INFO" "Detecting all available components..."
    
    # Check for each component
    if [ -d "$TEKTON_DIR/Synthesis" ] && [ -f "$TEKTON_DIR/Synthesis/synthesis/core/execution_engine.py" ]; then
        COMPONENTS+=("synthesis")
    fi
    
    if [ -d "$TEKTON_DIR/Harmonia" ] && [ -f "$TEKTON_DIR/Harmonia/harmonia/core/workflow.py" ]; then
        COMPONENTS+=("harmonia")
    fi
    
    if [ -d "$TEKTON_DIR/Athena" ] && [ -f "$TEKTON_DIR/Athena/athena/core/entity.py" ]; then
        COMPONENTS+=("athena")
    fi
    
    if [ -d "$TEKTON_DIR/Sophia" ] && [ -f "$TEKTON_DIR/Sophia/sophia/core/ml_engine.py" ]; then
        COMPONENTS+=("sophia")
    fi
    
    if [ -d "$TEKTON_DIR/Prometheus" ] && [ -f "$TEKTON_DIR/Prometheus/prometheus/core/planning_engine.py" ]; then
        COMPONENTS+=("prometheus")
    fi
    
    if [ -d "$TEKTON_DIR/Rhetor" ] && [ -f "$TEKTON_DIR/Rhetor/rhetor/__init__.py" ]; then
        COMPONENTS+=("rhetor")
    fi
    
    if [ -d "$TEKTON_DIR/Telos" ] && [ -f "$TEKTON_DIR/Telos/telos/__init__.py" ]; then
        COMPONENTS+=("telos")
    fi
    
    log "INFO" "Found components: ${COMPONENTS[*]}"
fi

# Check if any components were specified
if [ ${#COMPONENTS[@]} -eq 0 ]; then
    log "ERROR" "No components specified. Use --help for usage information."
    exit 1
fi

# Launch the specified components
for component in "${COMPONENTS[@]}"; do
    # Convert to lowercase
    component=$(echo "$component" | tr '[:upper:]' '[:lower:]')
    
    case "$component" in
        "synthesis")
            log "INFO" "Launching Synthesis Execution Engine..."
            
            # Check if already running
            if is_running "synthesis.core.execution_engine"; then
                log "WARN" "Synthesis is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Synthesis" ] && [ -f "$TEKTON_DIR/Synthesis/synthesis/core/execution_engine.py" ]; then
                # Set up environment
                SYNTHESIS_DIR="$TEKTON_DIR/Synthesis"
                SYNTHESIS_VENV="$SYNTHESIS_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$SYNTHESIS_DIR/setup.sh" ] && [ ! -d "$SYNTHESIS_VENV" ]; then
                    log "INFO" "Setting up Synthesis virtual environment..."
                    chmod +x "$SYNTHESIS_DIR/setup.sh"
                    (cd "$SYNTHESIS_DIR" && bash ./setup.sh)
                fi
                
                # Set up Python path
                if [ -d "$SYNTHESIS_VENV" ]; then
                    SYNTHESIS_PYTHON="$SYNTHESIS_VENV/bin/python"
                    verbose "Using Synthesis virtual environment at $SYNTHESIS_VENV"
                else
                    SYNTHESIS_PYTHON="python3"
                    export PYTHONPATH="$SYNTHESIS_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$SYNTHESIS_DIR/synthesis/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Synthesis with Hermes..."
                    chmod +x "$SYNTHESIS_DIR/synthesis/scripts/register_with_hermes.py"
                    
                    if [ -d "$SYNTHESIS_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$SYNTHESIS_PYTHON" "$SYNTHESIS_DIR/synthesis/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$SYNTHESIS_DIR:$PYTHONPATH" python3 "$SYNTHESIS_DIR/synthesis/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Synthesis Execution Engine is available"
            else
                log "ERROR" "Synthesis Execution Engine is not implemented or missing files"
            fi
            ;;
            
        "harmonia")
            log "INFO" "Launching Harmonia Workflow Engine..."
            
            # Check if already running
            if is_running "harmonia.core"; then
                log "WARN" "Harmonia is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Harmonia" ] && [ -f "$TEKTON_DIR/Harmonia/harmonia/core/workflow.py" ]; then
                # Set up environment
                HARMONIA_DIR="$TEKTON_DIR/Harmonia"
                HARMONIA_VENV="$HARMONIA_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$HARMONIA_DIR/setup.sh" ] && [ ! -d "$HARMONIA_VENV" ]; then
                    log "INFO" "Setting up Harmonia virtual environment..."
                    chmod +x "$HARMONIA_DIR/setup.sh"
                    (cd "$HARMONIA_DIR" && bash ./setup.sh)
                fi
                
                # Set up Python path
                if [ -d "$HARMONIA_VENV" ]; then
                    HARMONIA_PYTHON="$HARMONIA_VENV/bin/python"
                    verbose "Using Harmonia virtual environment at $HARMONIA_VENV"
                else
                    HARMONIA_PYTHON="python3"
                    export PYTHONPATH="$HARMONIA_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$HARMONIA_DIR/harmonia/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Harmonia with Hermes..."
                    chmod +x "$HARMONIA_DIR/harmonia/scripts/register_with_hermes.py"
                    
                    if [ -d "$HARMONIA_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$HARMONIA_PYTHON" "$HARMONIA_DIR/harmonia/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$HARMONIA_DIR:$PYTHONPATH" python3 "$HARMONIA_DIR/harmonia/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Harmonia Workflow Engine is available"
            else
                log "ERROR" "Harmonia Workflow Engine is not implemented or missing files"
            fi
            ;;
            
        "athena")
            log "INFO" "Launching Athena Knowledge Graph..."
            
            # Check if already running
            if is_running "athena.core"; then
                log "WARN" "Athena is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Athena" ] && [ -f "$TEKTON_DIR/Athena/athena/core/entity.py" ]; then
                # Set up environment
                ATHENA_DIR="$TEKTON_DIR/Athena"
                ATHENA_VENV="$ATHENA_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$ATHENA_DIR/setup.sh" ] && [ ! -d "$ATHENA_VENV" ]; then
                    log "INFO" "Setting up Athena virtual environment..."
                    chmod +x "$ATHENA_DIR/setup.sh"
                    (cd "$ATHENA_DIR" && bash ./setup.sh)
                fi
                
                # Set up Python path
                if [ -d "$ATHENA_VENV" ]; then
                    ATHENA_PYTHON="$ATHENA_VENV/bin/python"
                    verbose "Using Athena virtual environment at $ATHENA_VENV"
                else
                    ATHENA_PYTHON="python3"
                    export PYTHONPATH="$ATHENA_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$ATHENA_DIR/athena/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Athena with Hermes..."
                    chmod +x "$ATHENA_DIR/athena/scripts/register_with_hermes.py"
                    
                    if [ -d "$ATHENA_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$ATHENA_PYTHON" "$ATHENA_DIR/athena/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$ATHENA_DIR:$PYTHONPATH" python3 "$ATHENA_DIR/athena/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Athena Knowledge Graph is available"
            else
                log "ERROR" "Athena Knowledge Graph is not implemented or missing files"
            fi
            ;;
            
        "sophia")
            log "INFO" "Launching Sophia Machine Learning Engine..."
            
            # Check if already running
            if is_running "sophia.core"; then
                log "WARN" "Sophia is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Sophia" ] && [ -f "$TEKTON_DIR/Sophia/sophia/core/ml_engine.py" ]; then
                # Set up environment
                SOPHIA_DIR="$TEKTON_DIR/Sophia"
                SOPHIA_VENV="$SOPHIA_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$SOPHIA_DIR/setup.sh" ] && [ ! -d "$SOPHIA_VENV" ]; then
                    log "INFO" "Setting up Sophia virtual environment..."
                    chmod +x "$SOPHIA_DIR/setup.sh"
                    (cd "$SOPHIA_DIR" && bash ./setup.sh)
                fi
                
                # Set up Python path
                if [ -d "$SOPHIA_VENV" ]; then
                    SOPHIA_PYTHON="$SOPHIA_VENV/bin/python"
                    verbose "Using Sophia virtual environment at $SOPHIA_VENV"
                else
                    SOPHIA_PYTHON="python3"
                    export PYTHONPATH="$SOPHIA_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$SOPHIA_DIR/sophia/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Sophia with Hermes..."
                    chmod +x "$SOPHIA_DIR/sophia/scripts/register_with_hermes.py"
                    
                    if [ -d "$SOPHIA_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$SOPHIA_PYTHON" "$SOPHIA_DIR/sophia/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$SOPHIA_DIR:$PYTHONPATH" python3 "$SOPHIA_DIR/sophia/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Sophia Machine Learning Engine is available"
            else
                log "ERROR" "Sophia Machine Learning Engine is not implemented or missing files"
            fi
            ;;
            
        "prometheus")
            log "INFO" "Launching Prometheus Planning Engine..."
            
            # Check if already running
            if is_running "prometheus.core"; then
                log "WARN" "Prometheus is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Prometheus" ] && [ -f "$TEKTON_DIR/Prometheus/prometheus/core/planning_engine.py" ]; then
                # Set up environment
                PROMETHEUS_DIR="$TEKTON_DIR/Prometheus"
                PROMETHEUS_VENV="$PROMETHEUS_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$PROMETHEUS_DIR/setup.sh" ] && [ ! -d "$PROMETHEUS_VENV" ]; then
                    log "INFO" "Setting up Prometheus virtual environment..."
                    
                    if [ -f "$PROMETHEUS_DIR/setup.sh" ]; then
                        chmod +x "$PROMETHEUS_DIR/setup.sh"
                        (cd "$PROMETHEUS_DIR" && bash ./setup.sh)
                    else
                        # Create a basic setup script if one doesn't exist
                        mkdir -p "$PROMETHEUS_VENV"
                        python3 -m venv "$PROMETHEUS_VENV"
                        "$PROMETHEUS_VENV/bin/pip" install -e "$TEKTON_DIR/tekton-core"
                    fi
                fi
                
                # Set up Python path
                if [ -d "$PROMETHEUS_VENV" ]; then
                    PROMETHEUS_PYTHON="$PROMETHEUS_VENV/bin/python"
                    verbose "Using Prometheus virtual environment at $PROMETHEUS_VENV"
                else
                    PROMETHEUS_PYTHON="python3"
                    export PYTHONPATH="$PROMETHEUS_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$PROMETHEUS_DIR/prometheus/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Prometheus with Hermes..."
                    chmod +x "$PROMETHEUS_DIR/prometheus/scripts/register_with_hermes.py"
                    
                    if [ -d "$PROMETHEUS_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$PROMETHEUS_PYTHON" "$PROMETHEUS_DIR/prometheus/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$PROMETHEUS_DIR:$PYTHONPATH" python3 "$PROMETHEUS_DIR/prometheus/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Prometheus Planning Engine is available"
            else
                log "ERROR" "Prometheus Planning Engine is not implemented or missing files"
            fi
            ;;
            
        "rhetor")
            log "INFO" "Launching Rhetor Communication System..."
            
            # Check if already running
            if is_running "rhetor.core"; then
                log "WARN" "Rhetor is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Rhetor" ] && [ -f "$TEKTON_DIR/Rhetor/rhetor/__init__.py" ]; then
                # Set up environment
                RHETOR_DIR="$TEKTON_DIR/Rhetor"
                RHETOR_VENV="$RHETOR_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$RHETOR_DIR/setup.sh" ] && [ ! -d "$RHETOR_VENV" ]; then
                    log "INFO" "Setting up Rhetor virtual environment..."
                    chmod +x "$RHETOR_DIR/setup.sh"
                    (cd "$RHETOR_DIR" && bash ./setup.sh)
                fi
                
                # Set up Python path
                if [ -d "$RHETOR_VENV" ]; then
                    RHETOR_PYTHON="$RHETOR_VENV/bin/python"
                    verbose "Using Rhetor virtual environment at $RHETOR_VENV"
                else
                    RHETOR_PYTHON="python3"
                    export PYTHONPATH="$RHETOR_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$RHETOR_DIR/rhetor/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Rhetor with Hermes..."
                    chmod +x "$RHETOR_DIR/rhetor/scripts/register_with_hermes.py"
                    
                    if [ -d "$RHETOR_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$RHETOR_PYTHON" "$RHETOR_DIR/rhetor/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$RHETOR_DIR:$PYTHONPATH" python3 "$RHETOR_DIR/rhetor/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Rhetor Communication System is available"
            else
                log "ERROR" "Rhetor Communication System is not implemented or missing files"
            fi
            ;;
            
        "telos")
            log "INFO" "Launching Telos User Interface..."
            
            # Check if already running
            if is_running "telos.core"; then
                log "WARN" "Telos is already running"
                continue
            fi
            
            # Check if implemented
            if [ -d "$TEKTON_DIR/Telos" ] && [ -f "$TEKTON_DIR/Telos/telos/__init__.py" ]; then
                # Set up environment
                TELOS_DIR="$TEKTON_DIR/Telos"
                TELOS_VENV="$TELOS_DIR/venv"
                
                # Set up or check virtual environment
                if [ -f "$TELOS_DIR/setup.sh" ] && [ ! -d "$TELOS_VENV" ]; then
                    log "INFO" "Setting up Telos virtual environment..."
                    chmod +x "$TELOS_DIR/setup.sh"
                    (cd "$TELOS_DIR" && bash ./setup.sh)
                fi
                
                # Set up Python path
                if [ -d "$TELOS_VENV" ]; then
                    TELOS_PYTHON="$TELOS_VENV/bin/python"
                    verbose "Using Telos virtual environment at $TELOS_VENV"
                else
                    TELOS_PYTHON="python3"
                    export PYTHONPATH="$TELOS_DIR:$PYTHONPATH"
                    verbose "No virtual environment found, using system Python"
                fi
                
                # Register with Hermes if requested
                if [ "$REGISTER_WITH_HERMES" = true ] && [ -f "$TELOS_DIR/telos/scripts/register_with_hermes.py" ]; then
                    log "INFO" "Registering Telos with Hermes..."
                    chmod +x "$TELOS_DIR/telos/scripts/register_with_hermes.py"
                    
                    if [ -d "$TELOS_VENV" ]; then
                        HERMES_URL="$HERMES_URL" "$TELOS_PYTHON" "$TELOS_DIR/telos/scripts/register_with_hermes.py"
                    else
                        HERMES_URL="$HERMES_URL" PYTHONPATH="$TELOS_DIR:$PYTHONPATH" python3 "$TELOS_DIR/telos/scripts/register_with_hermes.py"
                    fi
                fi
                
                log "INFO" "Telos User Interface is available"
            else
                log "ERROR" "Telos User Interface is not implemented or missing files"
            fi
            ;;
            
        *)
            log "ERROR" "Unknown component: $component"
            ;;
    esac
done

log "INFO" "Component initialization complete"

# Check Tekton status
"$TEKTON_DIR/scripts/tekton_status"

echo -e "${BLUE}${BOLD}====== Tekton component launch complete ======${RESET}"